// Copyright 2015-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/aws/aws-sdk-go/service/ssm/ssmiface (interfaces: SSMAPI)

package mock_ssmiface

import (
	aws "github.com/aws/aws-sdk-go/aws"
	request "github.com/aws/aws-sdk-go/aws/request"
	ssm "github.com/aws/aws-sdk-go/service/ssm"
	gomock "github.com/golang/mock/gomock"
)

// Mock of SSMAPI interface
type MockSSMAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockSSMAPIRecorder
}

// Recorder for MockSSMAPI (not exported)
type _MockSSMAPIRecorder struct {
	mock *MockSSMAPI
}

func NewMockSSMAPI(ctrl *gomock.Controller) *MockSSMAPI {
	mock := &MockSSMAPI{ctrl: ctrl}
	mock.recorder = &_MockSSMAPIRecorder{mock}
	return mock
}

func (_m *MockSSMAPI) EXPECT() *_MockSSMAPIRecorder {
	return _m.recorder
}

func (_m *MockSSMAPI) AddTagsToResource(_param0 *ssm.AddTagsToResourceInput) (*ssm.AddTagsToResourceOutput, error) {
	ret := _m.ctrl.Call(_m, "AddTagsToResource", _param0)
	ret0, _ := ret[0].(*ssm.AddTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) AddTagsToResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTagsToResource", arg0)
}

func (_m *MockSSMAPI) AddTagsToResourceRequest(_param0 *ssm.AddTagsToResourceInput) (*request.Request, *ssm.AddTagsToResourceOutput) {
	ret := _m.ctrl.Call(_m, "AddTagsToResourceRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.AddTagsToResourceOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) AddTagsToResourceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTagsToResourceRequest", arg0)
}

func (_m *MockSSMAPI) AddTagsToResourceWithContext(_param0 aws.Context, _param1 *ssm.AddTagsToResourceInput, _param2 ...request.Option) (*ssm.AddTagsToResourceOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AddTagsToResourceWithContext", _s...)
	ret0, _ := ret[0].(*ssm.AddTagsToResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) AddTagsToResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTagsToResourceWithContext", _s...)
}

func (_m *MockSSMAPI) CancelCommand(_param0 *ssm.CancelCommandInput) (*ssm.CancelCommandOutput, error) {
	ret := _m.ctrl.Call(_m, "CancelCommand", _param0)
	ret0, _ := ret[0].(*ssm.CancelCommandOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CancelCommand(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelCommand", arg0)
}

func (_m *MockSSMAPI) CancelCommandRequest(_param0 *ssm.CancelCommandInput) (*request.Request, *ssm.CancelCommandOutput) {
	ret := _m.ctrl.Call(_m, "CancelCommandRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.CancelCommandOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CancelCommandRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelCommandRequest", arg0)
}

func (_m *MockSSMAPI) CancelCommandWithContext(_param0 aws.Context, _param1 *ssm.CancelCommandInput, _param2 ...request.Option) (*ssm.CancelCommandOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CancelCommandWithContext", _s...)
	ret0, _ := ret[0].(*ssm.CancelCommandOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CancelCommandWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CancelCommandWithContext", _s...)
}

func (_m *MockSSMAPI) CreateActivation(_param0 *ssm.CreateActivationInput) (*ssm.CreateActivationOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateActivation", _param0)
	ret0, _ := ret[0].(*ssm.CreateActivationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateActivation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateActivation", arg0)
}

func (_m *MockSSMAPI) CreateActivationRequest(_param0 *ssm.CreateActivationInput) (*request.Request, *ssm.CreateActivationOutput) {
	ret := _m.ctrl.Call(_m, "CreateActivationRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.CreateActivationOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateActivationRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateActivationRequest", arg0)
}

func (_m *MockSSMAPI) CreateActivationWithContext(_param0 aws.Context, _param1 *ssm.CreateActivationInput, _param2 ...request.Option) (*ssm.CreateActivationOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateActivationWithContext", _s...)
	ret0, _ := ret[0].(*ssm.CreateActivationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateActivationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateActivationWithContext", _s...)
}

func (_m *MockSSMAPI) CreateAssociation(_param0 *ssm.CreateAssociationInput) (*ssm.CreateAssociationOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateAssociation", _param0)
	ret0, _ := ret[0].(*ssm.CreateAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateAssociation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAssociation", arg0)
}

func (_m *MockSSMAPI) CreateAssociationBatch(_param0 *ssm.CreateAssociationBatchInput) (*ssm.CreateAssociationBatchOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateAssociationBatch", _param0)
	ret0, _ := ret[0].(*ssm.CreateAssociationBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateAssociationBatch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAssociationBatch", arg0)
}

func (_m *MockSSMAPI) CreateAssociationBatchRequest(_param0 *ssm.CreateAssociationBatchInput) (*request.Request, *ssm.CreateAssociationBatchOutput) {
	ret := _m.ctrl.Call(_m, "CreateAssociationBatchRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.CreateAssociationBatchOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateAssociationBatchRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAssociationBatchRequest", arg0)
}

func (_m *MockSSMAPI) CreateAssociationBatchWithContext(_param0 aws.Context, _param1 *ssm.CreateAssociationBatchInput, _param2 ...request.Option) (*ssm.CreateAssociationBatchOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateAssociationBatchWithContext", _s...)
	ret0, _ := ret[0].(*ssm.CreateAssociationBatchOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateAssociationBatchWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAssociationBatchWithContext", _s...)
}

func (_m *MockSSMAPI) CreateAssociationRequest(_param0 *ssm.CreateAssociationInput) (*request.Request, *ssm.CreateAssociationOutput) {
	ret := _m.ctrl.Call(_m, "CreateAssociationRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.CreateAssociationOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateAssociationRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAssociationRequest", arg0)
}

func (_m *MockSSMAPI) CreateAssociationWithContext(_param0 aws.Context, _param1 *ssm.CreateAssociationInput, _param2 ...request.Option) (*ssm.CreateAssociationOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateAssociationWithContext", _s...)
	ret0, _ := ret[0].(*ssm.CreateAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateAssociationWithContext", _s...)
}

func (_m *MockSSMAPI) CreateDocument(_param0 *ssm.CreateDocumentInput) (*ssm.CreateDocumentOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateDocument", _param0)
	ret0, _ := ret[0].(*ssm.CreateDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateDocument(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDocument", arg0)
}

func (_m *MockSSMAPI) CreateDocumentRequest(_param0 *ssm.CreateDocumentInput) (*request.Request, *ssm.CreateDocumentOutput) {
	ret := _m.ctrl.Call(_m, "CreateDocumentRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.CreateDocumentOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateDocumentRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDocumentRequest", arg0)
}

func (_m *MockSSMAPI) CreateDocumentWithContext(_param0 aws.Context, _param1 *ssm.CreateDocumentInput, _param2 ...request.Option) (*ssm.CreateDocumentOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateDocumentWithContext", _s...)
	ret0, _ := ret[0].(*ssm.CreateDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDocumentWithContext", _s...)
}

func (_m *MockSSMAPI) CreateMaintenanceWindow(_param0 *ssm.CreateMaintenanceWindowInput) (*ssm.CreateMaintenanceWindowOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateMaintenanceWindow", _param0)
	ret0, _ := ret[0].(*ssm.CreateMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateMaintenanceWindow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateMaintenanceWindow", arg0)
}

func (_m *MockSSMAPI) CreateMaintenanceWindowRequest(_param0 *ssm.CreateMaintenanceWindowInput) (*request.Request, *ssm.CreateMaintenanceWindowOutput) {
	ret := _m.ctrl.Call(_m, "CreateMaintenanceWindowRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.CreateMaintenanceWindowOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateMaintenanceWindowRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateMaintenanceWindowRequest", arg0)
}

func (_m *MockSSMAPI) CreateMaintenanceWindowWithContext(_param0 aws.Context, _param1 *ssm.CreateMaintenanceWindowInput, _param2 ...request.Option) (*ssm.CreateMaintenanceWindowOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateMaintenanceWindowWithContext", _s...)
	ret0, _ := ret[0].(*ssm.CreateMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateMaintenanceWindowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateMaintenanceWindowWithContext", _s...)
}

func (_m *MockSSMAPI) CreatePatchBaseline(_param0 *ssm.CreatePatchBaselineInput) (*ssm.CreatePatchBaselineOutput, error) {
	ret := _m.ctrl.Call(_m, "CreatePatchBaseline", _param0)
	ret0, _ := ret[0].(*ssm.CreatePatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreatePatchBaseline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePatchBaseline", arg0)
}

func (_m *MockSSMAPI) CreatePatchBaselineRequest(_param0 *ssm.CreatePatchBaselineInput) (*request.Request, *ssm.CreatePatchBaselineOutput) {
	ret := _m.ctrl.Call(_m, "CreatePatchBaselineRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.CreatePatchBaselineOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreatePatchBaselineRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePatchBaselineRequest", arg0)
}

func (_m *MockSSMAPI) CreatePatchBaselineWithContext(_param0 aws.Context, _param1 *ssm.CreatePatchBaselineInput, _param2 ...request.Option) (*ssm.CreatePatchBaselineOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreatePatchBaselineWithContext", _s...)
	ret0, _ := ret[0].(*ssm.CreatePatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreatePatchBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreatePatchBaselineWithContext", _s...)
}

func (_m *MockSSMAPI) CreateResourceDataSync(_param0 *ssm.CreateResourceDataSyncInput) (*ssm.CreateResourceDataSyncOutput, error) {
	ret := _m.ctrl.Call(_m, "CreateResourceDataSync", _param0)
	ret0, _ := ret[0].(*ssm.CreateResourceDataSyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateResourceDataSync(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateResourceDataSync", arg0)
}

func (_m *MockSSMAPI) CreateResourceDataSyncRequest(_param0 *ssm.CreateResourceDataSyncInput) (*request.Request, *ssm.CreateResourceDataSyncOutput) {
	ret := _m.ctrl.Call(_m, "CreateResourceDataSyncRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.CreateResourceDataSyncOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateResourceDataSyncRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateResourceDataSyncRequest", arg0)
}

func (_m *MockSSMAPI) CreateResourceDataSyncWithContext(_param0 aws.Context, _param1 *ssm.CreateResourceDataSyncInput, _param2 ...request.Option) (*ssm.CreateResourceDataSyncOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "CreateResourceDataSyncWithContext", _s...)
	ret0, _ := ret[0].(*ssm.CreateResourceDataSyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) CreateResourceDataSyncWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateResourceDataSyncWithContext", _s...)
}

func (_m *MockSSMAPI) DeleteActivation(_param0 *ssm.DeleteActivationInput) (*ssm.DeleteActivationOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteActivation", _param0)
	ret0, _ := ret[0].(*ssm.DeleteActivationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteActivation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteActivation", arg0)
}

func (_m *MockSSMAPI) DeleteActivationRequest(_param0 *ssm.DeleteActivationInput) (*request.Request, *ssm.DeleteActivationOutput) {
	ret := _m.ctrl.Call(_m, "DeleteActivationRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeleteActivationOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteActivationRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteActivationRequest", arg0)
}

func (_m *MockSSMAPI) DeleteActivationWithContext(_param0 aws.Context, _param1 *ssm.DeleteActivationInput, _param2 ...request.Option) (*ssm.DeleteActivationOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteActivationWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeleteActivationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteActivationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteActivationWithContext", _s...)
}

func (_m *MockSSMAPI) DeleteAssociation(_param0 *ssm.DeleteAssociationInput) (*ssm.DeleteAssociationOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteAssociation", _param0)
	ret0, _ := ret[0].(*ssm.DeleteAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteAssociation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAssociation", arg0)
}

func (_m *MockSSMAPI) DeleteAssociationRequest(_param0 *ssm.DeleteAssociationInput) (*request.Request, *ssm.DeleteAssociationOutput) {
	ret := _m.ctrl.Call(_m, "DeleteAssociationRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeleteAssociationOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteAssociationRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAssociationRequest", arg0)
}

func (_m *MockSSMAPI) DeleteAssociationWithContext(_param0 aws.Context, _param1 *ssm.DeleteAssociationInput, _param2 ...request.Option) (*ssm.DeleteAssociationOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteAssociationWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeleteAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteAssociationWithContext", _s...)
}

func (_m *MockSSMAPI) DeleteDocument(_param0 *ssm.DeleteDocumentInput) (*ssm.DeleteDocumentOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteDocument", _param0)
	ret0, _ := ret[0].(*ssm.DeleteDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteDocument(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDocument", arg0)
}

func (_m *MockSSMAPI) DeleteDocumentRequest(_param0 *ssm.DeleteDocumentInput) (*request.Request, *ssm.DeleteDocumentOutput) {
	ret := _m.ctrl.Call(_m, "DeleteDocumentRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeleteDocumentOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteDocumentRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDocumentRequest", arg0)
}

func (_m *MockSSMAPI) DeleteDocumentWithContext(_param0 aws.Context, _param1 *ssm.DeleteDocumentInput, _param2 ...request.Option) (*ssm.DeleteDocumentOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteDocumentWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeleteDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteDocumentWithContext", _s...)
}

func (_m *MockSSMAPI) DeleteMaintenanceWindow(_param0 *ssm.DeleteMaintenanceWindowInput) (*ssm.DeleteMaintenanceWindowOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteMaintenanceWindow", _param0)
	ret0, _ := ret[0].(*ssm.DeleteMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteMaintenanceWindow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteMaintenanceWindow", arg0)
}

func (_m *MockSSMAPI) DeleteMaintenanceWindowRequest(_param0 *ssm.DeleteMaintenanceWindowInput) (*request.Request, *ssm.DeleteMaintenanceWindowOutput) {
	ret := _m.ctrl.Call(_m, "DeleteMaintenanceWindowRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeleteMaintenanceWindowOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteMaintenanceWindowRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteMaintenanceWindowRequest", arg0)
}

func (_m *MockSSMAPI) DeleteMaintenanceWindowWithContext(_param0 aws.Context, _param1 *ssm.DeleteMaintenanceWindowInput, _param2 ...request.Option) (*ssm.DeleteMaintenanceWindowOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteMaintenanceWindowWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeleteMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteMaintenanceWindowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteMaintenanceWindowWithContext", _s...)
}

func (_m *MockSSMAPI) DeleteParameter(_param0 *ssm.DeleteParameterInput) (*ssm.DeleteParameterOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteParameter", _param0)
	ret0, _ := ret[0].(*ssm.DeleteParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteParameter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteParameter", arg0)
}

func (_m *MockSSMAPI) DeleteParameterRequest(_param0 *ssm.DeleteParameterInput) (*request.Request, *ssm.DeleteParameterOutput) {
	ret := _m.ctrl.Call(_m, "DeleteParameterRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeleteParameterOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteParameterRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteParameterRequest", arg0)
}

func (_m *MockSSMAPI) DeleteParameterWithContext(_param0 aws.Context, _param1 *ssm.DeleteParameterInput, _param2 ...request.Option) (*ssm.DeleteParameterOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteParameterWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeleteParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteParameterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteParameterWithContext", _s...)
}

func (_m *MockSSMAPI) DeleteParameters(_param0 *ssm.DeleteParametersInput) (*ssm.DeleteParametersOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteParameters", _param0)
	ret0, _ := ret[0].(*ssm.DeleteParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteParameters(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteParameters", arg0)
}

func (_m *MockSSMAPI) DeleteParametersRequest(_param0 *ssm.DeleteParametersInput) (*request.Request, *ssm.DeleteParametersOutput) {
	ret := _m.ctrl.Call(_m, "DeleteParametersRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeleteParametersOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteParametersRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteParametersRequest", arg0)
}

func (_m *MockSSMAPI) DeleteParametersWithContext(_param0 aws.Context, _param1 *ssm.DeleteParametersInput, _param2 ...request.Option) (*ssm.DeleteParametersOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteParametersWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeleteParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteParametersWithContext", _s...)
}

func (_m *MockSSMAPI) DeletePatchBaseline(_param0 *ssm.DeletePatchBaselineInput) (*ssm.DeletePatchBaselineOutput, error) {
	ret := _m.ctrl.Call(_m, "DeletePatchBaseline", _param0)
	ret0, _ := ret[0].(*ssm.DeletePatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeletePatchBaseline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePatchBaseline", arg0)
}

func (_m *MockSSMAPI) DeletePatchBaselineRequest(_param0 *ssm.DeletePatchBaselineInput) (*request.Request, *ssm.DeletePatchBaselineOutput) {
	ret := _m.ctrl.Call(_m, "DeletePatchBaselineRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeletePatchBaselineOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeletePatchBaselineRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePatchBaselineRequest", arg0)
}

func (_m *MockSSMAPI) DeletePatchBaselineWithContext(_param0 aws.Context, _param1 *ssm.DeletePatchBaselineInput, _param2 ...request.Option) (*ssm.DeletePatchBaselineOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeletePatchBaselineWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeletePatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeletePatchBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePatchBaselineWithContext", _s...)
}

func (_m *MockSSMAPI) DeleteResourceDataSync(_param0 *ssm.DeleteResourceDataSyncInput) (*ssm.DeleteResourceDataSyncOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteResourceDataSync", _param0)
	ret0, _ := ret[0].(*ssm.DeleteResourceDataSyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteResourceDataSync(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteResourceDataSync", arg0)
}

func (_m *MockSSMAPI) DeleteResourceDataSyncRequest(_param0 *ssm.DeleteResourceDataSyncInput) (*request.Request, *ssm.DeleteResourceDataSyncOutput) {
	ret := _m.ctrl.Call(_m, "DeleteResourceDataSyncRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeleteResourceDataSyncOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteResourceDataSyncRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteResourceDataSyncRequest", arg0)
}

func (_m *MockSSMAPI) DeleteResourceDataSyncWithContext(_param0 aws.Context, _param1 *ssm.DeleteResourceDataSyncInput, _param2 ...request.Option) (*ssm.DeleteResourceDataSyncOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeleteResourceDataSyncWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeleteResourceDataSyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeleteResourceDataSyncWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteResourceDataSyncWithContext", _s...)
}

func (_m *MockSSMAPI) DeregisterManagedInstance(_param0 *ssm.DeregisterManagedInstanceInput) (*ssm.DeregisterManagedInstanceOutput, error) {
	ret := _m.ctrl.Call(_m, "DeregisterManagedInstance", _param0)
	ret0, _ := ret[0].(*ssm.DeregisterManagedInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterManagedInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterManagedInstance", arg0)
}

func (_m *MockSSMAPI) DeregisterManagedInstanceRequest(_param0 *ssm.DeregisterManagedInstanceInput) (*request.Request, *ssm.DeregisterManagedInstanceOutput) {
	ret := _m.ctrl.Call(_m, "DeregisterManagedInstanceRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeregisterManagedInstanceOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterManagedInstanceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterManagedInstanceRequest", arg0)
}

func (_m *MockSSMAPI) DeregisterManagedInstanceWithContext(_param0 aws.Context, _param1 *ssm.DeregisterManagedInstanceInput, _param2 ...request.Option) (*ssm.DeregisterManagedInstanceOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeregisterManagedInstanceWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeregisterManagedInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterManagedInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterManagedInstanceWithContext", _s...)
}

func (_m *MockSSMAPI) DeregisterPatchBaselineForPatchGroup(_param0 *ssm.DeregisterPatchBaselineForPatchGroupInput) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "DeregisterPatchBaselineForPatchGroup", _param0)
	ret0, _ := ret[0].(*ssm.DeregisterPatchBaselineForPatchGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterPatchBaselineForPatchGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterPatchBaselineForPatchGroup", arg0)
}

func (_m *MockSSMAPI) DeregisterPatchBaselineForPatchGroupRequest(_param0 *ssm.DeregisterPatchBaselineForPatchGroupInput) (*request.Request, *ssm.DeregisterPatchBaselineForPatchGroupOutput) {
	ret := _m.ctrl.Call(_m, "DeregisterPatchBaselineForPatchGroupRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeregisterPatchBaselineForPatchGroupOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterPatchBaselineForPatchGroupRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterPatchBaselineForPatchGroupRequest", arg0)
}

func (_m *MockSSMAPI) DeregisterPatchBaselineForPatchGroupWithContext(_param0 aws.Context, _param1 *ssm.DeregisterPatchBaselineForPatchGroupInput, _param2 ...request.Option) (*ssm.DeregisterPatchBaselineForPatchGroupOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeregisterPatchBaselineForPatchGroupWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeregisterPatchBaselineForPatchGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterPatchBaselineForPatchGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterPatchBaselineForPatchGroupWithContext", _s...)
}

func (_m *MockSSMAPI) DeregisterTargetFromMaintenanceWindow(_param0 *ssm.DeregisterTargetFromMaintenanceWindowInput) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {
	ret := _m.ctrl.Call(_m, "DeregisterTargetFromMaintenanceWindow", _param0)
	ret0, _ := ret[0].(*ssm.DeregisterTargetFromMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterTargetFromMaintenanceWindow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterTargetFromMaintenanceWindow", arg0)
}

func (_m *MockSSMAPI) DeregisterTargetFromMaintenanceWindowRequest(_param0 *ssm.DeregisterTargetFromMaintenanceWindowInput) (*request.Request, *ssm.DeregisterTargetFromMaintenanceWindowOutput) {
	ret := _m.ctrl.Call(_m, "DeregisterTargetFromMaintenanceWindowRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeregisterTargetFromMaintenanceWindowOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterTargetFromMaintenanceWindowRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterTargetFromMaintenanceWindowRequest", arg0)
}

func (_m *MockSSMAPI) DeregisterTargetFromMaintenanceWindowWithContext(_param0 aws.Context, _param1 *ssm.DeregisterTargetFromMaintenanceWindowInput, _param2 ...request.Option) (*ssm.DeregisterTargetFromMaintenanceWindowOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeregisterTargetFromMaintenanceWindowWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeregisterTargetFromMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterTargetFromMaintenanceWindowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterTargetFromMaintenanceWindowWithContext", _s...)
}

func (_m *MockSSMAPI) DeregisterTaskFromMaintenanceWindow(_param0 *ssm.DeregisterTaskFromMaintenanceWindowInput) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {
	ret := _m.ctrl.Call(_m, "DeregisterTaskFromMaintenanceWindow", _param0)
	ret0, _ := ret[0].(*ssm.DeregisterTaskFromMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterTaskFromMaintenanceWindow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterTaskFromMaintenanceWindow", arg0)
}

func (_m *MockSSMAPI) DeregisterTaskFromMaintenanceWindowRequest(_param0 *ssm.DeregisterTaskFromMaintenanceWindowInput) (*request.Request, *ssm.DeregisterTaskFromMaintenanceWindowOutput) {
	ret := _m.ctrl.Call(_m, "DeregisterTaskFromMaintenanceWindowRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DeregisterTaskFromMaintenanceWindowOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterTaskFromMaintenanceWindowRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterTaskFromMaintenanceWindowRequest", arg0)
}

func (_m *MockSSMAPI) DeregisterTaskFromMaintenanceWindowWithContext(_param0 aws.Context, _param1 *ssm.DeregisterTaskFromMaintenanceWindowInput, _param2 ...request.Option) (*ssm.DeregisterTaskFromMaintenanceWindowOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DeregisterTaskFromMaintenanceWindowWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DeregisterTaskFromMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DeregisterTaskFromMaintenanceWindowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeregisterTaskFromMaintenanceWindowWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeActivations(_param0 *ssm.DescribeActivationsInput) (*ssm.DescribeActivationsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeActivations", _param0)
	ret0, _ := ret[0].(*ssm.DescribeActivationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeActivations(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeActivations", arg0)
}

func (_m *MockSSMAPI) DescribeActivationsPages(_param0 *ssm.DescribeActivationsInput, _param1 func(*ssm.DescribeActivationsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeActivationsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) DescribeActivationsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeActivationsPages", arg0, arg1)
}

func (_m *MockSSMAPI) DescribeActivationsPagesWithContext(_param0 aws.Context, _param1 *ssm.DescribeActivationsInput, _param2 func(*ssm.DescribeActivationsOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeActivationsPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) DescribeActivationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeActivationsPagesWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeActivationsRequest(_param0 *ssm.DescribeActivationsInput) (*request.Request, *ssm.DescribeActivationsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeActivationsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeActivationsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeActivationsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeActivationsRequest", arg0)
}

func (_m *MockSSMAPI) DescribeActivationsWithContext(_param0 aws.Context, _param1 *ssm.DescribeActivationsInput, _param2 ...request.Option) (*ssm.DescribeActivationsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeActivationsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeActivationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeActivationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeActivationsWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeAssociation(_param0 *ssm.DescribeAssociationInput) (*ssm.DescribeAssociationOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeAssociation", _param0)
	ret0, _ := ret[0].(*ssm.DescribeAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAssociation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAssociation", arg0)
}

func (_m *MockSSMAPI) DescribeAssociationRequest(_param0 *ssm.DescribeAssociationInput) (*request.Request, *ssm.DescribeAssociationOutput) {
	ret := _m.ctrl.Call(_m, "DescribeAssociationRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeAssociationOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAssociationRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAssociationRequest", arg0)
}

func (_m *MockSSMAPI) DescribeAssociationWithContext(_param0 aws.Context, _param1 *ssm.DescribeAssociationInput, _param2 ...request.Option) (*ssm.DescribeAssociationOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeAssociationWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAssociationWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeAutomationExecutions(_param0 *ssm.DescribeAutomationExecutionsInput) (*ssm.DescribeAutomationExecutionsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeAutomationExecutions", _param0)
	ret0, _ := ret[0].(*ssm.DescribeAutomationExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAutomationExecutions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAutomationExecutions", arg0)
}

func (_m *MockSSMAPI) DescribeAutomationExecutionsRequest(_param0 *ssm.DescribeAutomationExecutionsInput) (*request.Request, *ssm.DescribeAutomationExecutionsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeAutomationExecutionsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeAutomationExecutionsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAutomationExecutionsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAutomationExecutionsRequest", arg0)
}

func (_m *MockSSMAPI) DescribeAutomationExecutionsWithContext(_param0 aws.Context, _param1 *ssm.DescribeAutomationExecutionsInput, _param2 ...request.Option) (*ssm.DescribeAutomationExecutionsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeAutomationExecutionsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeAutomationExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAutomationExecutionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAutomationExecutionsWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeAutomationStepExecutions(_param0 *ssm.DescribeAutomationStepExecutionsInput) (*ssm.DescribeAutomationStepExecutionsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeAutomationStepExecutions", _param0)
	ret0, _ := ret[0].(*ssm.DescribeAutomationStepExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAutomationStepExecutions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAutomationStepExecutions", arg0)
}

func (_m *MockSSMAPI) DescribeAutomationStepExecutionsRequest(_param0 *ssm.DescribeAutomationStepExecutionsInput) (*request.Request, *ssm.DescribeAutomationStepExecutionsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeAutomationStepExecutionsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeAutomationStepExecutionsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAutomationStepExecutionsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAutomationStepExecutionsRequest", arg0)
}

func (_m *MockSSMAPI) DescribeAutomationStepExecutionsWithContext(_param0 aws.Context, _param1 *ssm.DescribeAutomationStepExecutionsInput, _param2 ...request.Option) (*ssm.DescribeAutomationStepExecutionsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeAutomationStepExecutionsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeAutomationStepExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAutomationStepExecutionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAutomationStepExecutionsWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeAvailablePatches(_param0 *ssm.DescribeAvailablePatchesInput) (*ssm.DescribeAvailablePatchesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeAvailablePatches", _param0)
	ret0, _ := ret[0].(*ssm.DescribeAvailablePatchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAvailablePatches(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAvailablePatches", arg0)
}

func (_m *MockSSMAPI) DescribeAvailablePatchesRequest(_param0 *ssm.DescribeAvailablePatchesInput) (*request.Request, *ssm.DescribeAvailablePatchesOutput) {
	ret := _m.ctrl.Call(_m, "DescribeAvailablePatchesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeAvailablePatchesOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAvailablePatchesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAvailablePatchesRequest", arg0)
}

func (_m *MockSSMAPI) DescribeAvailablePatchesWithContext(_param0 aws.Context, _param1 *ssm.DescribeAvailablePatchesInput, _param2 ...request.Option) (*ssm.DescribeAvailablePatchesOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeAvailablePatchesWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeAvailablePatchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeAvailablePatchesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeAvailablePatchesWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeDocument(_param0 *ssm.DescribeDocumentInput) (*ssm.DescribeDocumentOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeDocument", _param0)
	ret0, _ := ret[0].(*ssm.DescribeDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeDocument(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeDocument", arg0)
}

func (_m *MockSSMAPI) DescribeDocumentPermission(_param0 *ssm.DescribeDocumentPermissionInput) (*ssm.DescribeDocumentPermissionOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeDocumentPermission", _param0)
	ret0, _ := ret[0].(*ssm.DescribeDocumentPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeDocumentPermission(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeDocumentPermission", arg0)
}

func (_m *MockSSMAPI) DescribeDocumentPermissionRequest(_param0 *ssm.DescribeDocumentPermissionInput) (*request.Request, *ssm.DescribeDocumentPermissionOutput) {
	ret := _m.ctrl.Call(_m, "DescribeDocumentPermissionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeDocumentPermissionOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeDocumentPermissionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeDocumentPermissionRequest", arg0)
}

func (_m *MockSSMAPI) DescribeDocumentPermissionWithContext(_param0 aws.Context, _param1 *ssm.DescribeDocumentPermissionInput, _param2 ...request.Option) (*ssm.DescribeDocumentPermissionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeDocumentPermissionWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeDocumentPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeDocumentPermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeDocumentPermissionWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeDocumentRequest(_param0 *ssm.DescribeDocumentInput) (*request.Request, *ssm.DescribeDocumentOutput) {
	ret := _m.ctrl.Call(_m, "DescribeDocumentRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeDocumentOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeDocumentRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeDocumentRequest", arg0)
}

func (_m *MockSSMAPI) DescribeDocumentWithContext(_param0 aws.Context, _param1 *ssm.DescribeDocumentInput, _param2 ...request.Option) (*ssm.DescribeDocumentOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeDocumentWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeDocumentWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeEffectiveInstanceAssociations(_param0 *ssm.DescribeEffectiveInstanceAssociationsInput) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeEffectiveInstanceAssociations", _param0)
	ret0, _ := ret[0].(*ssm.DescribeEffectiveInstanceAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeEffectiveInstanceAssociations(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeEffectiveInstanceAssociations", arg0)
}

func (_m *MockSSMAPI) DescribeEffectiveInstanceAssociationsRequest(_param0 *ssm.DescribeEffectiveInstanceAssociationsInput) (*request.Request, *ssm.DescribeEffectiveInstanceAssociationsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeEffectiveInstanceAssociationsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeEffectiveInstanceAssociationsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeEffectiveInstanceAssociationsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeEffectiveInstanceAssociationsRequest", arg0)
}

func (_m *MockSSMAPI) DescribeEffectiveInstanceAssociationsWithContext(_param0 aws.Context, _param1 *ssm.DescribeEffectiveInstanceAssociationsInput, _param2 ...request.Option) (*ssm.DescribeEffectiveInstanceAssociationsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeEffectiveInstanceAssociationsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeEffectiveInstanceAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeEffectiveInstanceAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeEffectiveInstanceAssociationsWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeEffectivePatchesForPatchBaseline(_param0 *ssm.DescribeEffectivePatchesForPatchBaselineInput) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeEffectivePatchesForPatchBaseline", _param0)
	ret0, _ := ret[0].(*ssm.DescribeEffectivePatchesForPatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeEffectivePatchesForPatchBaseline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeEffectivePatchesForPatchBaseline", arg0)
}

func (_m *MockSSMAPI) DescribeEffectivePatchesForPatchBaselineRequest(_param0 *ssm.DescribeEffectivePatchesForPatchBaselineInput) (*request.Request, *ssm.DescribeEffectivePatchesForPatchBaselineOutput) {
	ret := _m.ctrl.Call(_m, "DescribeEffectivePatchesForPatchBaselineRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeEffectivePatchesForPatchBaselineOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeEffectivePatchesForPatchBaselineRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeEffectivePatchesForPatchBaselineRequest", arg0)
}

func (_m *MockSSMAPI) DescribeEffectivePatchesForPatchBaselineWithContext(_param0 aws.Context, _param1 *ssm.DescribeEffectivePatchesForPatchBaselineInput, _param2 ...request.Option) (*ssm.DescribeEffectivePatchesForPatchBaselineOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeEffectivePatchesForPatchBaselineWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeEffectivePatchesForPatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeEffectivePatchesForPatchBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeEffectivePatchesForPatchBaselineWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeInstanceAssociationsStatus(_param0 *ssm.DescribeInstanceAssociationsStatusInput) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeInstanceAssociationsStatus", _param0)
	ret0, _ := ret[0].(*ssm.DescribeInstanceAssociationsStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstanceAssociationsStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceAssociationsStatus", arg0)
}

func (_m *MockSSMAPI) DescribeInstanceAssociationsStatusRequest(_param0 *ssm.DescribeInstanceAssociationsStatusInput) (*request.Request, *ssm.DescribeInstanceAssociationsStatusOutput) {
	ret := _m.ctrl.Call(_m, "DescribeInstanceAssociationsStatusRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeInstanceAssociationsStatusOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstanceAssociationsStatusRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceAssociationsStatusRequest", arg0)
}

func (_m *MockSSMAPI) DescribeInstanceAssociationsStatusWithContext(_param0 aws.Context, _param1 *ssm.DescribeInstanceAssociationsStatusInput, _param2 ...request.Option) (*ssm.DescribeInstanceAssociationsStatusOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeInstanceAssociationsStatusWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeInstanceAssociationsStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstanceAssociationsStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceAssociationsStatusWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeInstanceInformation(_param0 *ssm.DescribeInstanceInformationInput) (*ssm.DescribeInstanceInformationOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeInstanceInformation", _param0)
	ret0, _ := ret[0].(*ssm.DescribeInstanceInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstanceInformation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceInformation", arg0)
}

func (_m *MockSSMAPI) DescribeInstanceInformationPages(_param0 *ssm.DescribeInstanceInformationInput, _param1 func(*ssm.DescribeInstanceInformationOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeInstanceInformationPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) DescribeInstanceInformationPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceInformationPages", arg0, arg1)
}

func (_m *MockSSMAPI) DescribeInstanceInformationPagesWithContext(_param0 aws.Context, _param1 *ssm.DescribeInstanceInformationInput, _param2 func(*ssm.DescribeInstanceInformationOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeInstanceInformationPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) DescribeInstanceInformationPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceInformationPagesWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeInstanceInformationRequest(_param0 *ssm.DescribeInstanceInformationInput) (*request.Request, *ssm.DescribeInstanceInformationOutput) {
	ret := _m.ctrl.Call(_m, "DescribeInstanceInformationRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeInstanceInformationOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstanceInformationRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceInformationRequest", arg0)
}

func (_m *MockSSMAPI) DescribeInstanceInformationWithContext(_param0 aws.Context, _param1 *ssm.DescribeInstanceInformationInput, _param2 ...request.Option) (*ssm.DescribeInstanceInformationOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeInstanceInformationWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeInstanceInformationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstanceInformationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstanceInformationWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeInstancePatchStates(_param0 *ssm.DescribeInstancePatchStatesInput) (*ssm.DescribeInstancePatchStatesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeInstancePatchStates", _param0)
	ret0, _ := ret[0].(*ssm.DescribeInstancePatchStatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstancePatchStates(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstancePatchStates", arg0)
}

func (_m *MockSSMAPI) DescribeInstancePatchStatesForPatchGroup(_param0 *ssm.DescribeInstancePatchStatesForPatchGroupInput) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeInstancePatchStatesForPatchGroup", _param0)
	ret0, _ := ret[0].(*ssm.DescribeInstancePatchStatesForPatchGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstancePatchStatesForPatchGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstancePatchStatesForPatchGroup", arg0)
}

func (_m *MockSSMAPI) DescribeInstancePatchStatesForPatchGroupRequest(_param0 *ssm.DescribeInstancePatchStatesForPatchGroupInput) (*request.Request, *ssm.DescribeInstancePatchStatesForPatchGroupOutput) {
	ret := _m.ctrl.Call(_m, "DescribeInstancePatchStatesForPatchGroupRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeInstancePatchStatesForPatchGroupOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstancePatchStatesForPatchGroupRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstancePatchStatesForPatchGroupRequest", arg0)
}

func (_m *MockSSMAPI) DescribeInstancePatchStatesForPatchGroupWithContext(_param0 aws.Context, _param1 *ssm.DescribeInstancePatchStatesForPatchGroupInput, _param2 ...request.Option) (*ssm.DescribeInstancePatchStatesForPatchGroupOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeInstancePatchStatesForPatchGroupWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeInstancePatchStatesForPatchGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstancePatchStatesForPatchGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstancePatchStatesForPatchGroupWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeInstancePatchStatesRequest(_param0 *ssm.DescribeInstancePatchStatesInput) (*request.Request, *ssm.DescribeInstancePatchStatesOutput) {
	ret := _m.ctrl.Call(_m, "DescribeInstancePatchStatesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeInstancePatchStatesOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstancePatchStatesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstancePatchStatesRequest", arg0)
}

func (_m *MockSSMAPI) DescribeInstancePatchStatesWithContext(_param0 aws.Context, _param1 *ssm.DescribeInstancePatchStatesInput, _param2 ...request.Option) (*ssm.DescribeInstancePatchStatesOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeInstancePatchStatesWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeInstancePatchStatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstancePatchStatesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstancePatchStatesWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeInstancePatches(_param0 *ssm.DescribeInstancePatchesInput) (*ssm.DescribeInstancePatchesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeInstancePatches", _param0)
	ret0, _ := ret[0].(*ssm.DescribeInstancePatchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstancePatches(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstancePatches", arg0)
}

func (_m *MockSSMAPI) DescribeInstancePatchesRequest(_param0 *ssm.DescribeInstancePatchesInput) (*request.Request, *ssm.DescribeInstancePatchesOutput) {
	ret := _m.ctrl.Call(_m, "DescribeInstancePatchesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeInstancePatchesOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstancePatchesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstancePatchesRequest", arg0)
}

func (_m *MockSSMAPI) DescribeInstancePatchesWithContext(_param0 aws.Context, _param1 *ssm.DescribeInstancePatchesInput, _param2 ...request.Option) (*ssm.DescribeInstancePatchesOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeInstancePatchesWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeInstancePatchesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeInstancePatchesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeInstancePatchesWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowExecutionTaskInvocations(_param0 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowExecutionTaskInvocations", _param0)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowExecutionTaskInvocations(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowExecutionTaskInvocations", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowExecutionTaskInvocationsRequest(_param0 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowExecutionTaskInvocationsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowExecutionTaskInvocationsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowExecutionTaskInvocationsRequest", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowExecutionTaskInvocationsWithContext(_param0 aws.Context, _param1 *ssm.DescribeMaintenanceWindowExecutionTaskInvocationsInput, _param2 ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowExecutionTaskInvocationsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowExecutionTaskInvocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowExecutionTaskInvocationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowExecutionTaskInvocationsWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowExecutionTasks(_param0 *ssm.DescribeMaintenanceWindowExecutionTasksInput) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowExecutionTasks", _param0)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowExecutionTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowExecutionTasks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowExecutionTasks", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowExecutionTasksRequest(_param0 *ssm.DescribeMaintenanceWindowExecutionTasksInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionTasksOutput) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowExecutionTasksRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeMaintenanceWindowExecutionTasksOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowExecutionTasksRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowExecutionTasksRequest", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowExecutionTasksWithContext(_param0 aws.Context, _param1 *ssm.DescribeMaintenanceWindowExecutionTasksInput, _param2 ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionTasksOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowExecutionTasksWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowExecutionTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowExecutionTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowExecutionTasksWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowExecutions(_param0 *ssm.DescribeMaintenanceWindowExecutionsInput) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowExecutions", _param0)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowExecutions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowExecutions", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowExecutionsRequest(_param0 *ssm.DescribeMaintenanceWindowExecutionsInput) (*request.Request, *ssm.DescribeMaintenanceWindowExecutionsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowExecutionsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeMaintenanceWindowExecutionsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowExecutionsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowExecutionsRequest", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowExecutionsWithContext(_param0 aws.Context, _param1 *ssm.DescribeMaintenanceWindowExecutionsInput, _param2 ...request.Option) (*ssm.DescribeMaintenanceWindowExecutionsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowExecutionsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowExecutionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowExecutionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowExecutionsWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowTargets(_param0 *ssm.DescribeMaintenanceWindowTargetsInput) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowTargets", _param0)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowTargets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowTargets", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowTargetsRequest(_param0 *ssm.DescribeMaintenanceWindowTargetsInput) (*request.Request, *ssm.DescribeMaintenanceWindowTargetsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowTargetsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeMaintenanceWindowTargetsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowTargetsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowTargetsRequest", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowTargetsWithContext(_param0 aws.Context, _param1 *ssm.DescribeMaintenanceWindowTargetsInput, _param2 ...request.Option) (*ssm.DescribeMaintenanceWindowTargetsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowTargetsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowTargetsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowTargetsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowTargetsWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowTasks(_param0 *ssm.DescribeMaintenanceWindowTasksInput) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowTasks", _param0)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowTasks(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowTasks", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowTasksRequest(_param0 *ssm.DescribeMaintenanceWindowTasksInput) (*request.Request, *ssm.DescribeMaintenanceWindowTasksOutput) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowTasksRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeMaintenanceWindowTasksOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowTasksRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowTasksRequest", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowTasksWithContext(_param0 aws.Context, _param1 *ssm.DescribeMaintenanceWindowTasksInput, _param2 ...request.Option) (*ssm.DescribeMaintenanceWindowTasksOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowTasksWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowTasksOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowTasksWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowTasksWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindows(_param0 *ssm.DescribeMaintenanceWindowsInput) (*ssm.DescribeMaintenanceWindowsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindows", _param0)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindows(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindows", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowsRequest(_param0 *ssm.DescribeMaintenanceWindowsInput) (*request.Request, *ssm.DescribeMaintenanceWindowsOutput) {
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeMaintenanceWindowsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowsRequest", arg0)
}

func (_m *MockSSMAPI) DescribeMaintenanceWindowsWithContext(_param0 aws.Context, _param1 *ssm.DescribeMaintenanceWindowsInput, _param2 ...request.Option) (*ssm.DescribeMaintenanceWindowsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeMaintenanceWindowsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeMaintenanceWindowsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeMaintenanceWindowsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeMaintenanceWindowsWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeParameters(_param0 *ssm.DescribeParametersInput) (*ssm.DescribeParametersOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeParameters", _param0)
	ret0, _ := ret[0].(*ssm.DescribeParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeParameters(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeParameters", arg0)
}

func (_m *MockSSMAPI) DescribeParametersPages(_param0 *ssm.DescribeParametersInput, _param1 func(*ssm.DescribeParametersOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "DescribeParametersPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) DescribeParametersPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeParametersPages", arg0, arg1)
}

func (_m *MockSSMAPI) DescribeParametersPagesWithContext(_param0 aws.Context, _param1 *ssm.DescribeParametersInput, _param2 func(*ssm.DescribeParametersOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeParametersPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) DescribeParametersPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeParametersPagesWithContext", _s...)
}

func (_m *MockSSMAPI) DescribeParametersRequest(_param0 *ssm.DescribeParametersInput) (*request.Request, *ssm.DescribeParametersOutput) {
	ret := _m.ctrl.Call(_m, "DescribeParametersRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribeParametersOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeParametersRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeParametersRequest", arg0)
}

func (_m *MockSSMAPI) DescribeParametersWithContext(_param0 aws.Context, _param1 *ssm.DescribeParametersInput, _param2 ...request.Option) (*ssm.DescribeParametersOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribeParametersWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribeParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribeParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeParametersWithContext", _s...)
}

func (_m *MockSSMAPI) DescribePatchBaselines(_param0 *ssm.DescribePatchBaselinesInput) (*ssm.DescribePatchBaselinesOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribePatchBaselines", _param0)
	ret0, _ := ret[0].(*ssm.DescribePatchBaselinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribePatchBaselines(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePatchBaselines", arg0)
}

func (_m *MockSSMAPI) DescribePatchBaselinesRequest(_param0 *ssm.DescribePatchBaselinesInput) (*request.Request, *ssm.DescribePatchBaselinesOutput) {
	ret := _m.ctrl.Call(_m, "DescribePatchBaselinesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribePatchBaselinesOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribePatchBaselinesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePatchBaselinesRequest", arg0)
}

func (_m *MockSSMAPI) DescribePatchBaselinesWithContext(_param0 aws.Context, _param1 *ssm.DescribePatchBaselinesInput, _param2 ...request.Option) (*ssm.DescribePatchBaselinesOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribePatchBaselinesWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribePatchBaselinesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribePatchBaselinesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePatchBaselinesWithContext", _s...)
}

func (_m *MockSSMAPI) DescribePatchGroupState(_param0 *ssm.DescribePatchGroupStateInput) (*ssm.DescribePatchGroupStateOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribePatchGroupState", _param0)
	ret0, _ := ret[0].(*ssm.DescribePatchGroupStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribePatchGroupState(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePatchGroupState", arg0)
}

func (_m *MockSSMAPI) DescribePatchGroupStateRequest(_param0 *ssm.DescribePatchGroupStateInput) (*request.Request, *ssm.DescribePatchGroupStateOutput) {
	ret := _m.ctrl.Call(_m, "DescribePatchGroupStateRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribePatchGroupStateOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribePatchGroupStateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePatchGroupStateRequest", arg0)
}

func (_m *MockSSMAPI) DescribePatchGroupStateWithContext(_param0 aws.Context, _param1 *ssm.DescribePatchGroupStateInput, _param2 ...request.Option) (*ssm.DescribePatchGroupStateOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribePatchGroupStateWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribePatchGroupStateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribePatchGroupStateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePatchGroupStateWithContext", _s...)
}

func (_m *MockSSMAPI) DescribePatchGroups(_param0 *ssm.DescribePatchGroupsInput) (*ssm.DescribePatchGroupsOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribePatchGroups", _param0)
	ret0, _ := ret[0].(*ssm.DescribePatchGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribePatchGroups(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePatchGroups", arg0)
}

func (_m *MockSSMAPI) DescribePatchGroupsRequest(_param0 *ssm.DescribePatchGroupsInput) (*request.Request, *ssm.DescribePatchGroupsOutput) {
	ret := _m.ctrl.Call(_m, "DescribePatchGroupsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.DescribePatchGroupsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribePatchGroupsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePatchGroupsRequest", arg0)
}

func (_m *MockSSMAPI) DescribePatchGroupsWithContext(_param0 aws.Context, _param1 *ssm.DescribePatchGroupsInput, _param2 ...request.Option) (*ssm.DescribePatchGroupsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "DescribePatchGroupsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.DescribePatchGroupsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) DescribePatchGroupsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribePatchGroupsWithContext", _s...)
}

func (_m *MockSSMAPI) GetAutomationExecution(_param0 *ssm.GetAutomationExecutionInput) (*ssm.GetAutomationExecutionOutput, error) {
	ret := _m.ctrl.Call(_m, "GetAutomationExecution", _param0)
	ret0, _ := ret[0].(*ssm.GetAutomationExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetAutomationExecution(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAutomationExecution", arg0)
}

func (_m *MockSSMAPI) GetAutomationExecutionRequest(_param0 *ssm.GetAutomationExecutionInput) (*request.Request, *ssm.GetAutomationExecutionOutput) {
	ret := _m.ctrl.Call(_m, "GetAutomationExecutionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetAutomationExecutionOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetAutomationExecutionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAutomationExecutionRequest", arg0)
}

func (_m *MockSSMAPI) GetAutomationExecutionWithContext(_param0 aws.Context, _param1 *ssm.GetAutomationExecutionInput, _param2 ...request.Option) (*ssm.GetAutomationExecutionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetAutomationExecutionWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetAutomationExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetAutomationExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAutomationExecutionWithContext", _s...)
}

func (_m *MockSSMAPI) GetCommandInvocation(_param0 *ssm.GetCommandInvocationInput) (*ssm.GetCommandInvocationOutput, error) {
	ret := _m.ctrl.Call(_m, "GetCommandInvocation", _param0)
	ret0, _ := ret[0].(*ssm.GetCommandInvocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetCommandInvocation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCommandInvocation", arg0)
}

func (_m *MockSSMAPI) GetCommandInvocationRequest(_param0 *ssm.GetCommandInvocationInput) (*request.Request, *ssm.GetCommandInvocationOutput) {
	ret := _m.ctrl.Call(_m, "GetCommandInvocationRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetCommandInvocationOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetCommandInvocationRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCommandInvocationRequest", arg0)
}

func (_m *MockSSMAPI) GetCommandInvocationWithContext(_param0 aws.Context, _param1 *ssm.GetCommandInvocationInput, _param2 ...request.Option) (*ssm.GetCommandInvocationOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetCommandInvocationWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetCommandInvocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetCommandInvocationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCommandInvocationWithContext", _s...)
}

func (_m *MockSSMAPI) GetDefaultPatchBaseline(_param0 *ssm.GetDefaultPatchBaselineInput) (*ssm.GetDefaultPatchBaselineOutput, error) {
	ret := _m.ctrl.Call(_m, "GetDefaultPatchBaseline", _param0)
	ret0, _ := ret[0].(*ssm.GetDefaultPatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetDefaultPatchBaseline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDefaultPatchBaseline", arg0)
}

func (_m *MockSSMAPI) GetDefaultPatchBaselineRequest(_param0 *ssm.GetDefaultPatchBaselineInput) (*request.Request, *ssm.GetDefaultPatchBaselineOutput) {
	ret := _m.ctrl.Call(_m, "GetDefaultPatchBaselineRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetDefaultPatchBaselineOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetDefaultPatchBaselineRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDefaultPatchBaselineRequest", arg0)
}

func (_m *MockSSMAPI) GetDefaultPatchBaselineWithContext(_param0 aws.Context, _param1 *ssm.GetDefaultPatchBaselineInput, _param2 ...request.Option) (*ssm.GetDefaultPatchBaselineOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetDefaultPatchBaselineWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetDefaultPatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetDefaultPatchBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDefaultPatchBaselineWithContext", _s...)
}

func (_m *MockSSMAPI) GetDeployablePatchSnapshotForInstance(_param0 *ssm.GetDeployablePatchSnapshotForInstanceInput) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {
	ret := _m.ctrl.Call(_m, "GetDeployablePatchSnapshotForInstance", _param0)
	ret0, _ := ret[0].(*ssm.GetDeployablePatchSnapshotForInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetDeployablePatchSnapshotForInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDeployablePatchSnapshotForInstance", arg0)
}

func (_m *MockSSMAPI) GetDeployablePatchSnapshotForInstanceRequest(_param0 *ssm.GetDeployablePatchSnapshotForInstanceInput) (*request.Request, *ssm.GetDeployablePatchSnapshotForInstanceOutput) {
	ret := _m.ctrl.Call(_m, "GetDeployablePatchSnapshotForInstanceRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetDeployablePatchSnapshotForInstanceOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetDeployablePatchSnapshotForInstanceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDeployablePatchSnapshotForInstanceRequest", arg0)
}

func (_m *MockSSMAPI) GetDeployablePatchSnapshotForInstanceWithContext(_param0 aws.Context, _param1 *ssm.GetDeployablePatchSnapshotForInstanceInput, _param2 ...request.Option) (*ssm.GetDeployablePatchSnapshotForInstanceOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetDeployablePatchSnapshotForInstanceWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetDeployablePatchSnapshotForInstanceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetDeployablePatchSnapshotForInstanceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDeployablePatchSnapshotForInstanceWithContext", _s...)
}

func (_m *MockSSMAPI) GetDocument(_param0 *ssm.GetDocumentInput) (*ssm.GetDocumentOutput, error) {
	ret := _m.ctrl.Call(_m, "GetDocument", _param0)
	ret0, _ := ret[0].(*ssm.GetDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetDocument(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDocument", arg0)
}

func (_m *MockSSMAPI) GetDocumentRequest(_param0 *ssm.GetDocumentInput) (*request.Request, *ssm.GetDocumentOutput) {
	ret := _m.ctrl.Call(_m, "GetDocumentRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetDocumentOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetDocumentRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDocumentRequest", arg0)
}

func (_m *MockSSMAPI) GetDocumentWithContext(_param0 aws.Context, _param1 *ssm.GetDocumentInput, _param2 ...request.Option) (*ssm.GetDocumentOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetDocumentWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDocumentWithContext", _s...)
}

func (_m *MockSSMAPI) GetInventory(_param0 *ssm.GetInventoryInput) (*ssm.GetInventoryOutput, error) {
	ret := _m.ctrl.Call(_m, "GetInventory", _param0)
	ret0, _ := ret[0].(*ssm.GetInventoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetInventory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInventory", arg0)
}

func (_m *MockSSMAPI) GetInventoryRequest(_param0 *ssm.GetInventoryInput) (*request.Request, *ssm.GetInventoryOutput) {
	ret := _m.ctrl.Call(_m, "GetInventoryRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetInventoryOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetInventoryRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInventoryRequest", arg0)
}

func (_m *MockSSMAPI) GetInventorySchema(_param0 *ssm.GetInventorySchemaInput) (*ssm.GetInventorySchemaOutput, error) {
	ret := _m.ctrl.Call(_m, "GetInventorySchema", _param0)
	ret0, _ := ret[0].(*ssm.GetInventorySchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetInventorySchema(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInventorySchema", arg0)
}

func (_m *MockSSMAPI) GetInventorySchemaRequest(_param0 *ssm.GetInventorySchemaInput) (*request.Request, *ssm.GetInventorySchemaOutput) {
	ret := _m.ctrl.Call(_m, "GetInventorySchemaRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetInventorySchemaOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetInventorySchemaRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInventorySchemaRequest", arg0)
}

func (_m *MockSSMAPI) GetInventorySchemaWithContext(_param0 aws.Context, _param1 *ssm.GetInventorySchemaInput, _param2 ...request.Option) (*ssm.GetInventorySchemaOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetInventorySchemaWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetInventorySchemaOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetInventorySchemaWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInventorySchemaWithContext", _s...)
}

func (_m *MockSSMAPI) GetInventoryWithContext(_param0 aws.Context, _param1 *ssm.GetInventoryInput, _param2 ...request.Option) (*ssm.GetInventoryOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetInventoryWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetInventoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetInventoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInventoryWithContext", _s...)
}

func (_m *MockSSMAPI) GetMaintenanceWindow(_param0 *ssm.GetMaintenanceWindowInput) (*ssm.GetMaintenanceWindowOutput, error) {
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindow", _param0)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindow", arg0)
}

func (_m *MockSSMAPI) GetMaintenanceWindowExecution(_param0 *ssm.GetMaintenanceWindowExecutionInput) (*ssm.GetMaintenanceWindowExecutionOutput, error) {
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowExecution", _param0)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowExecution(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowExecution", arg0)
}

func (_m *MockSSMAPI) GetMaintenanceWindowExecutionRequest(_param0 *ssm.GetMaintenanceWindowExecutionInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionOutput) {
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowExecutionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetMaintenanceWindowExecutionOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowExecutionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowExecutionRequest", arg0)
}

func (_m *MockSSMAPI) GetMaintenanceWindowExecutionTask(_param0 *ssm.GetMaintenanceWindowExecutionTaskInput) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowExecutionTask", _param0)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowExecutionTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowExecutionTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowExecutionTask", arg0)
}

func (_m *MockSSMAPI) GetMaintenanceWindowExecutionTaskInvocation(_param0 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowExecutionTaskInvocation", _param0)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowExecutionTaskInvocation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowExecutionTaskInvocation", arg0)
}

func (_m *MockSSMAPI) GetMaintenanceWindowExecutionTaskInvocationRequest(_param0 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionTaskInvocationOutput) {
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowExecutionTaskInvocationRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowExecutionTaskInvocationRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowExecutionTaskInvocationRequest", arg0)
}

func (_m *MockSSMAPI) GetMaintenanceWindowExecutionTaskInvocationWithContext(_param0 aws.Context, _param1 *ssm.GetMaintenanceWindowExecutionTaskInvocationInput, _param2 ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowExecutionTaskInvocationWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowExecutionTaskInvocationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowExecutionTaskInvocationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowExecutionTaskInvocationWithContext", _s...)
}

func (_m *MockSSMAPI) GetMaintenanceWindowExecutionTaskRequest(_param0 *ssm.GetMaintenanceWindowExecutionTaskInput) (*request.Request, *ssm.GetMaintenanceWindowExecutionTaskOutput) {
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowExecutionTaskRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetMaintenanceWindowExecutionTaskOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowExecutionTaskRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowExecutionTaskRequest", arg0)
}

func (_m *MockSSMAPI) GetMaintenanceWindowExecutionTaskWithContext(_param0 aws.Context, _param1 *ssm.GetMaintenanceWindowExecutionTaskInput, _param2 ...request.Option) (*ssm.GetMaintenanceWindowExecutionTaskOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowExecutionTaskWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowExecutionTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowExecutionTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowExecutionTaskWithContext", _s...)
}

func (_m *MockSSMAPI) GetMaintenanceWindowExecutionWithContext(_param0 aws.Context, _param1 *ssm.GetMaintenanceWindowExecutionInput, _param2 ...request.Option) (*ssm.GetMaintenanceWindowExecutionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowExecutionWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowExecutionWithContext", _s...)
}

func (_m *MockSSMAPI) GetMaintenanceWindowRequest(_param0 *ssm.GetMaintenanceWindowInput) (*request.Request, *ssm.GetMaintenanceWindowOutput) {
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetMaintenanceWindowOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowRequest", arg0)
}

func (_m *MockSSMAPI) GetMaintenanceWindowTask(_param0 *ssm.GetMaintenanceWindowTaskInput) (*ssm.GetMaintenanceWindowTaskOutput, error) {
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowTask", _param0)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowTask", arg0)
}

func (_m *MockSSMAPI) GetMaintenanceWindowTaskRequest(_param0 *ssm.GetMaintenanceWindowTaskInput) (*request.Request, *ssm.GetMaintenanceWindowTaskOutput) {
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowTaskRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetMaintenanceWindowTaskOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowTaskRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowTaskRequest", arg0)
}

func (_m *MockSSMAPI) GetMaintenanceWindowTaskWithContext(_param0 aws.Context, _param1 *ssm.GetMaintenanceWindowTaskInput, _param2 ...request.Option) (*ssm.GetMaintenanceWindowTaskOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowTaskWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowTaskWithContext", _s...)
}

func (_m *MockSSMAPI) GetMaintenanceWindowWithContext(_param0 aws.Context, _param1 *ssm.GetMaintenanceWindowInput, _param2 ...request.Option) (*ssm.GetMaintenanceWindowOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetMaintenanceWindowWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetMaintenanceWindowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMaintenanceWindowWithContext", _s...)
}

func (_m *MockSSMAPI) GetParameter(_param0 *ssm.GetParameterInput) (*ssm.GetParameterOutput, error) {
	ret := _m.ctrl.Call(_m, "GetParameter", _param0)
	ret0, _ := ret[0].(*ssm.GetParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParameter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParameter", arg0)
}

func (_m *MockSSMAPI) GetParameterHistory(_param0 *ssm.GetParameterHistoryInput) (*ssm.GetParameterHistoryOutput, error) {
	ret := _m.ctrl.Call(_m, "GetParameterHistory", _param0)
	ret0, _ := ret[0].(*ssm.GetParameterHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParameterHistory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParameterHistory", arg0)
}

func (_m *MockSSMAPI) GetParameterHistoryPages(_param0 *ssm.GetParameterHistoryInput, _param1 func(*ssm.GetParameterHistoryOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "GetParameterHistoryPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) GetParameterHistoryPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParameterHistoryPages", arg0, arg1)
}

func (_m *MockSSMAPI) GetParameterHistoryPagesWithContext(_param0 aws.Context, _param1 *ssm.GetParameterHistoryInput, _param2 func(*ssm.GetParameterHistoryOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetParameterHistoryPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) GetParameterHistoryPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParameterHistoryPagesWithContext", _s...)
}

func (_m *MockSSMAPI) GetParameterHistoryRequest(_param0 *ssm.GetParameterHistoryInput) (*request.Request, *ssm.GetParameterHistoryOutput) {
	ret := _m.ctrl.Call(_m, "GetParameterHistoryRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetParameterHistoryOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParameterHistoryRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParameterHistoryRequest", arg0)
}

func (_m *MockSSMAPI) GetParameterHistoryWithContext(_param0 aws.Context, _param1 *ssm.GetParameterHistoryInput, _param2 ...request.Option) (*ssm.GetParameterHistoryOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetParameterHistoryWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetParameterHistoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParameterHistoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParameterHistoryWithContext", _s...)
}

func (_m *MockSSMAPI) GetParameterRequest(_param0 *ssm.GetParameterInput) (*request.Request, *ssm.GetParameterOutput) {
	ret := _m.ctrl.Call(_m, "GetParameterRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetParameterOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParameterRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParameterRequest", arg0)
}

func (_m *MockSSMAPI) GetParameterWithContext(_param0 aws.Context, _param1 *ssm.GetParameterInput, _param2 ...request.Option) (*ssm.GetParameterOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetParameterWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParameterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParameterWithContext", _s...)
}

func (_m *MockSSMAPI) GetParameters(_param0 *ssm.GetParametersInput) (*ssm.GetParametersOutput, error) {
	ret := _m.ctrl.Call(_m, "GetParameters", _param0)
	ret0, _ := ret[0].(*ssm.GetParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParameters(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParameters", arg0)
}

func (_m *MockSSMAPI) GetParametersByPath(_param0 *ssm.GetParametersByPathInput) (*ssm.GetParametersByPathOutput, error) {
	ret := _m.ctrl.Call(_m, "GetParametersByPath", _param0)
	ret0, _ := ret[0].(*ssm.GetParametersByPathOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParametersByPath(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParametersByPath", arg0)
}

func (_m *MockSSMAPI) GetParametersByPathPages(_param0 *ssm.GetParametersByPathInput, _param1 func(*ssm.GetParametersByPathOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "GetParametersByPathPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) GetParametersByPathPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParametersByPathPages", arg0, arg1)
}

func (_m *MockSSMAPI) GetParametersByPathPagesWithContext(_param0 aws.Context, _param1 *ssm.GetParametersByPathInput, _param2 func(*ssm.GetParametersByPathOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetParametersByPathPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) GetParametersByPathPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParametersByPathPagesWithContext", _s...)
}

func (_m *MockSSMAPI) GetParametersByPathRequest(_param0 *ssm.GetParametersByPathInput) (*request.Request, *ssm.GetParametersByPathOutput) {
	ret := _m.ctrl.Call(_m, "GetParametersByPathRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetParametersByPathOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParametersByPathRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParametersByPathRequest", arg0)
}

func (_m *MockSSMAPI) GetParametersByPathWithContext(_param0 aws.Context, _param1 *ssm.GetParametersByPathInput, _param2 ...request.Option) (*ssm.GetParametersByPathOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetParametersByPathWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetParametersByPathOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParametersByPathWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParametersByPathWithContext", _s...)
}

func (_m *MockSSMAPI) GetParametersRequest(_param0 *ssm.GetParametersInput) (*request.Request, *ssm.GetParametersOutput) {
	ret := _m.ctrl.Call(_m, "GetParametersRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetParametersOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParametersRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParametersRequest", arg0)
}

func (_m *MockSSMAPI) GetParametersWithContext(_param0 aws.Context, _param1 *ssm.GetParametersInput, _param2 ...request.Option) (*ssm.GetParametersOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetParametersWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetParametersOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetParametersWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetParametersWithContext", _s...)
}

func (_m *MockSSMAPI) GetPatchBaseline(_param0 *ssm.GetPatchBaselineInput) (*ssm.GetPatchBaselineOutput, error) {
	ret := _m.ctrl.Call(_m, "GetPatchBaseline", _param0)
	ret0, _ := ret[0].(*ssm.GetPatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetPatchBaseline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPatchBaseline", arg0)
}

func (_m *MockSSMAPI) GetPatchBaselineForPatchGroup(_param0 *ssm.GetPatchBaselineForPatchGroupInput) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "GetPatchBaselineForPatchGroup", _param0)
	ret0, _ := ret[0].(*ssm.GetPatchBaselineForPatchGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetPatchBaselineForPatchGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPatchBaselineForPatchGroup", arg0)
}

func (_m *MockSSMAPI) GetPatchBaselineForPatchGroupRequest(_param0 *ssm.GetPatchBaselineForPatchGroupInput) (*request.Request, *ssm.GetPatchBaselineForPatchGroupOutput) {
	ret := _m.ctrl.Call(_m, "GetPatchBaselineForPatchGroupRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetPatchBaselineForPatchGroupOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetPatchBaselineForPatchGroupRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPatchBaselineForPatchGroupRequest", arg0)
}

func (_m *MockSSMAPI) GetPatchBaselineForPatchGroupWithContext(_param0 aws.Context, _param1 *ssm.GetPatchBaselineForPatchGroupInput, _param2 ...request.Option) (*ssm.GetPatchBaselineForPatchGroupOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetPatchBaselineForPatchGroupWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetPatchBaselineForPatchGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetPatchBaselineForPatchGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPatchBaselineForPatchGroupWithContext", _s...)
}

func (_m *MockSSMAPI) GetPatchBaselineRequest(_param0 *ssm.GetPatchBaselineInput) (*request.Request, *ssm.GetPatchBaselineOutput) {
	ret := _m.ctrl.Call(_m, "GetPatchBaselineRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.GetPatchBaselineOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetPatchBaselineRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPatchBaselineRequest", arg0)
}

func (_m *MockSSMAPI) GetPatchBaselineWithContext(_param0 aws.Context, _param1 *ssm.GetPatchBaselineInput, _param2 ...request.Option) (*ssm.GetPatchBaselineOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "GetPatchBaselineWithContext", _s...)
	ret0, _ := ret[0].(*ssm.GetPatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) GetPatchBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPatchBaselineWithContext", _s...)
}

func (_m *MockSSMAPI) ListAssociationVersions(_param0 *ssm.ListAssociationVersionsInput) (*ssm.ListAssociationVersionsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListAssociationVersions", _param0)
	ret0, _ := ret[0].(*ssm.ListAssociationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListAssociationVersions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAssociationVersions", arg0)
}

func (_m *MockSSMAPI) ListAssociationVersionsRequest(_param0 *ssm.ListAssociationVersionsInput) (*request.Request, *ssm.ListAssociationVersionsOutput) {
	ret := _m.ctrl.Call(_m, "ListAssociationVersionsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListAssociationVersionsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListAssociationVersionsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAssociationVersionsRequest", arg0)
}

func (_m *MockSSMAPI) ListAssociationVersionsWithContext(_param0 aws.Context, _param1 *ssm.ListAssociationVersionsInput, _param2 ...request.Option) (*ssm.ListAssociationVersionsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListAssociationVersionsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListAssociationVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListAssociationVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAssociationVersionsWithContext", _s...)
}

func (_m *MockSSMAPI) ListAssociations(_param0 *ssm.ListAssociationsInput) (*ssm.ListAssociationsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListAssociations", _param0)
	ret0, _ := ret[0].(*ssm.ListAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListAssociations(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAssociations", arg0)
}

func (_m *MockSSMAPI) ListAssociationsPages(_param0 *ssm.ListAssociationsInput, _param1 func(*ssm.ListAssociationsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListAssociationsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) ListAssociationsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAssociationsPages", arg0, arg1)
}

func (_m *MockSSMAPI) ListAssociationsPagesWithContext(_param0 aws.Context, _param1 *ssm.ListAssociationsInput, _param2 func(*ssm.ListAssociationsOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListAssociationsPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) ListAssociationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAssociationsPagesWithContext", _s...)
}

func (_m *MockSSMAPI) ListAssociationsRequest(_param0 *ssm.ListAssociationsInput) (*request.Request, *ssm.ListAssociationsOutput) {
	ret := _m.ctrl.Call(_m, "ListAssociationsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListAssociationsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListAssociationsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAssociationsRequest", arg0)
}

func (_m *MockSSMAPI) ListAssociationsWithContext(_param0 aws.Context, _param1 *ssm.ListAssociationsInput, _param2 ...request.Option) (*ssm.ListAssociationsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListAssociationsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListAssociationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListAssociationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListAssociationsWithContext", _s...)
}

func (_m *MockSSMAPI) ListCommandInvocations(_param0 *ssm.ListCommandInvocationsInput) (*ssm.ListCommandInvocationsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListCommandInvocations", _param0)
	ret0, _ := ret[0].(*ssm.ListCommandInvocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListCommandInvocations(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCommandInvocations", arg0)
}

func (_m *MockSSMAPI) ListCommandInvocationsPages(_param0 *ssm.ListCommandInvocationsInput, _param1 func(*ssm.ListCommandInvocationsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListCommandInvocationsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) ListCommandInvocationsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCommandInvocationsPages", arg0, arg1)
}

func (_m *MockSSMAPI) ListCommandInvocationsPagesWithContext(_param0 aws.Context, _param1 *ssm.ListCommandInvocationsInput, _param2 func(*ssm.ListCommandInvocationsOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListCommandInvocationsPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) ListCommandInvocationsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCommandInvocationsPagesWithContext", _s...)
}

func (_m *MockSSMAPI) ListCommandInvocationsRequest(_param0 *ssm.ListCommandInvocationsInput) (*request.Request, *ssm.ListCommandInvocationsOutput) {
	ret := _m.ctrl.Call(_m, "ListCommandInvocationsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListCommandInvocationsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListCommandInvocationsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCommandInvocationsRequest", arg0)
}

func (_m *MockSSMAPI) ListCommandInvocationsWithContext(_param0 aws.Context, _param1 *ssm.ListCommandInvocationsInput, _param2 ...request.Option) (*ssm.ListCommandInvocationsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListCommandInvocationsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListCommandInvocationsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListCommandInvocationsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCommandInvocationsWithContext", _s...)
}

func (_m *MockSSMAPI) ListCommands(_param0 *ssm.ListCommandsInput) (*ssm.ListCommandsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListCommands", _param0)
	ret0, _ := ret[0].(*ssm.ListCommandsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListCommands(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCommands", arg0)
}

func (_m *MockSSMAPI) ListCommandsPages(_param0 *ssm.ListCommandsInput, _param1 func(*ssm.ListCommandsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListCommandsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) ListCommandsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCommandsPages", arg0, arg1)
}

func (_m *MockSSMAPI) ListCommandsPagesWithContext(_param0 aws.Context, _param1 *ssm.ListCommandsInput, _param2 func(*ssm.ListCommandsOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListCommandsPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) ListCommandsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCommandsPagesWithContext", _s...)
}

func (_m *MockSSMAPI) ListCommandsRequest(_param0 *ssm.ListCommandsInput) (*request.Request, *ssm.ListCommandsOutput) {
	ret := _m.ctrl.Call(_m, "ListCommandsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListCommandsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListCommandsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCommandsRequest", arg0)
}

func (_m *MockSSMAPI) ListCommandsWithContext(_param0 aws.Context, _param1 *ssm.ListCommandsInput, _param2 ...request.Option) (*ssm.ListCommandsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListCommandsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListCommandsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListCommandsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCommandsWithContext", _s...)
}

func (_m *MockSSMAPI) ListComplianceItems(_param0 *ssm.ListComplianceItemsInput) (*ssm.ListComplianceItemsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListComplianceItems", _param0)
	ret0, _ := ret[0].(*ssm.ListComplianceItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListComplianceItems(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListComplianceItems", arg0)
}

func (_m *MockSSMAPI) ListComplianceItemsRequest(_param0 *ssm.ListComplianceItemsInput) (*request.Request, *ssm.ListComplianceItemsOutput) {
	ret := _m.ctrl.Call(_m, "ListComplianceItemsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListComplianceItemsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListComplianceItemsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListComplianceItemsRequest", arg0)
}

func (_m *MockSSMAPI) ListComplianceItemsWithContext(_param0 aws.Context, _param1 *ssm.ListComplianceItemsInput, _param2 ...request.Option) (*ssm.ListComplianceItemsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListComplianceItemsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListComplianceItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListComplianceItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListComplianceItemsWithContext", _s...)
}

func (_m *MockSSMAPI) ListComplianceSummaries(_param0 *ssm.ListComplianceSummariesInput) (*ssm.ListComplianceSummariesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListComplianceSummaries", _param0)
	ret0, _ := ret[0].(*ssm.ListComplianceSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListComplianceSummaries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListComplianceSummaries", arg0)
}

func (_m *MockSSMAPI) ListComplianceSummariesRequest(_param0 *ssm.ListComplianceSummariesInput) (*request.Request, *ssm.ListComplianceSummariesOutput) {
	ret := _m.ctrl.Call(_m, "ListComplianceSummariesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListComplianceSummariesOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListComplianceSummariesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListComplianceSummariesRequest", arg0)
}

func (_m *MockSSMAPI) ListComplianceSummariesWithContext(_param0 aws.Context, _param1 *ssm.ListComplianceSummariesInput, _param2 ...request.Option) (*ssm.ListComplianceSummariesOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListComplianceSummariesWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListComplianceSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListComplianceSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListComplianceSummariesWithContext", _s...)
}

func (_m *MockSSMAPI) ListDocumentVersions(_param0 *ssm.ListDocumentVersionsInput) (*ssm.ListDocumentVersionsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListDocumentVersions", _param0)
	ret0, _ := ret[0].(*ssm.ListDocumentVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListDocumentVersions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListDocumentVersions", arg0)
}

func (_m *MockSSMAPI) ListDocumentVersionsRequest(_param0 *ssm.ListDocumentVersionsInput) (*request.Request, *ssm.ListDocumentVersionsOutput) {
	ret := _m.ctrl.Call(_m, "ListDocumentVersionsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListDocumentVersionsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListDocumentVersionsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListDocumentVersionsRequest", arg0)
}

func (_m *MockSSMAPI) ListDocumentVersionsWithContext(_param0 aws.Context, _param1 *ssm.ListDocumentVersionsInput, _param2 ...request.Option) (*ssm.ListDocumentVersionsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListDocumentVersionsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListDocumentVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListDocumentVersionsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListDocumentVersionsWithContext", _s...)
}

func (_m *MockSSMAPI) ListDocuments(_param0 *ssm.ListDocumentsInput) (*ssm.ListDocumentsOutput, error) {
	ret := _m.ctrl.Call(_m, "ListDocuments", _param0)
	ret0, _ := ret[0].(*ssm.ListDocumentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListDocuments(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListDocuments", arg0)
}

func (_m *MockSSMAPI) ListDocumentsPages(_param0 *ssm.ListDocumentsInput, _param1 func(*ssm.ListDocumentsOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListDocumentsPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) ListDocumentsPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListDocumentsPages", arg0, arg1)
}

func (_m *MockSSMAPI) ListDocumentsPagesWithContext(_param0 aws.Context, _param1 *ssm.ListDocumentsInput, _param2 func(*ssm.ListDocumentsOutput, bool) bool, _param3 ...request.Option) error {
	_s := []interface{}{_param0, _param1, _param2}
	for _, _x := range _param3 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListDocumentsPagesWithContext", _s...)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSSMAPIRecorder) ListDocumentsPagesWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListDocumentsPagesWithContext", _s...)
}

func (_m *MockSSMAPI) ListDocumentsRequest(_param0 *ssm.ListDocumentsInput) (*request.Request, *ssm.ListDocumentsOutput) {
	ret := _m.ctrl.Call(_m, "ListDocumentsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListDocumentsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListDocumentsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListDocumentsRequest", arg0)
}

func (_m *MockSSMAPI) ListDocumentsWithContext(_param0 aws.Context, _param1 *ssm.ListDocumentsInput, _param2 ...request.Option) (*ssm.ListDocumentsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListDocumentsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListDocumentsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListDocumentsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListDocumentsWithContext", _s...)
}

func (_m *MockSSMAPI) ListInventoryEntries(_param0 *ssm.ListInventoryEntriesInput) (*ssm.ListInventoryEntriesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListInventoryEntries", _param0)
	ret0, _ := ret[0].(*ssm.ListInventoryEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListInventoryEntries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInventoryEntries", arg0)
}

func (_m *MockSSMAPI) ListInventoryEntriesRequest(_param0 *ssm.ListInventoryEntriesInput) (*request.Request, *ssm.ListInventoryEntriesOutput) {
	ret := _m.ctrl.Call(_m, "ListInventoryEntriesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListInventoryEntriesOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListInventoryEntriesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInventoryEntriesRequest", arg0)
}

func (_m *MockSSMAPI) ListInventoryEntriesWithContext(_param0 aws.Context, _param1 *ssm.ListInventoryEntriesInput, _param2 ...request.Option) (*ssm.ListInventoryEntriesOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListInventoryEntriesWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListInventoryEntriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListInventoryEntriesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListInventoryEntriesWithContext", _s...)
}

func (_m *MockSSMAPI) ListResourceComplianceSummaries(_param0 *ssm.ListResourceComplianceSummariesInput) (*ssm.ListResourceComplianceSummariesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListResourceComplianceSummaries", _param0)
	ret0, _ := ret[0].(*ssm.ListResourceComplianceSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListResourceComplianceSummaries(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListResourceComplianceSummaries", arg0)
}

func (_m *MockSSMAPI) ListResourceComplianceSummariesRequest(_param0 *ssm.ListResourceComplianceSummariesInput) (*request.Request, *ssm.ListResourceComplianceSummariesOutput) {
	ret := _m.ctrl.Call(_m, "ListResourceComplianceSummariesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListResourceComplianceSummariesOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListResourceComplianceSummariesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListResourceComplianceSummariesRequest", arg0)
}

func (_m *MockSSMAPI) ListResourceComplianceSummariesWithContext(_param0 aws.Context, _param1 *ssm.ListResourceComplianceSummariesInput, _param2 ...request.Option) (*ssm.ListResourceComplianceSummariesOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListResourceComplianceSummariesWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListResourceComplianceSummariesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListResourceComplianceSummariesWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListResourceComplianceSummariesWithContext", _s...)
}

func (_m *MockSSMAPI) ListResourceDataSync(_param0 *ssm.ListResourceDataSyncInput) (*ssm.ListResourceDataSyncOutput, error) {
	ret := _m.ctrl.Call(_m, "ListResourceDataSync", _param0)
	ret0, _ := ret[0].(*ssm.ListResourceDataSyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListResourceDataSync(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListResourceDataSync", arg0)
}

func (_m *MockSSMAPI) ListResourceDataSyncRequest(_param0 *ssm.ListResourceDataSyncInput) (*request.Request, *ssm.ListResourceDataSyncOutput) {
	ret := _m.ctrl.Call(_m, "ListResourceDataSyncRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListResourceDataSyncOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListResourceDataSyncRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListResourceDataSyncRequest", arg0)
}

func (_m *MockSSMAPI) ListResourceDataSyncWithContext(_param0 aws.Context, _param1 *ssm.ListResourceDataSyncInput, _param2 ...request.Option) (*ssm.ListResourceDataSyncOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListResourceDataSyncWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListResourceDataSyncOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListResourceDataSyncWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListResourceDataSyncWithContext", _s...)
}

func (_m *MockSSMAPI) ListTagsForResource(_param0 *ssm.ListTagsForResourceInput) (*ssm.ListTagsForResourceOutput, error) {
	ret := _m.ctrl.Call(_m, "ListTagsForResource", _param0)
	ret0, _ := ret[0].(*ssm.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListTagsForResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTagsForResource", arg0)
}

func (_m *MockSSMAPI) ListTagsForResourceRequest(_param0 *ssm.ListTagsForResourceInput) (*request.Request, *ssm.ListTagsForResourceOutput) {
	ret := _m.ctrl.Call(_m, "ListTagsForResourceRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ListTagsForResourceOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListTagsForResourceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTagsForResourceRequest", arg0)
}

func (_m *MockSSMAPI) ListTagsForResourceWithContext(_param0 aws.Context, _param1 *ssm.ListTagsForResourceInput, _param2 ...request.Option) (*ssm.ListTagsForResourceOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ListTagsForResourceWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ListTagsForResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ListTagsForResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTagsForResourceWithContext", _s...)
}

func (_m *MockSSMAPI) ModifyDocumentPermission(_param0 *ssm.ModifyDocumentPermissionInput) (*ssm.ModifyDocumentPermissionOutput, error) {
	ret := _m.ctrl.Call(_m, "ModifyDocumentPermission", _param0)
	ret0, _ := ret[0].(*ssm.ModifyDocumentPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ModifyDocumentPermission(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyDocumentPermission", arg0)
}

func (_m *MockSSMAPI) ModifyDocumentPermissionRequest(_param0 *ssm.ModifyDocumentPermissionInput) (*request.Request, *ssm.ModifyDocumentPermissionOutput) {
	ret := _m.ctrl.Call(_m, "ModifyDocumentPermissionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.ModifyDocumentPermissionOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ModifyDocumentPermissionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyDocumentPermissionRequest", arg0)
}

func (_m *MockSSMAPI) ModifyDocumentPermissionWithContext(_param0 aws.Context, _param1 *ssm.ModifyDocumentPermissionInput, _param2 ...request.Option) (*ssm.ModifyDocumentPermissionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "ModifyDocumentPermissionWithContext", _s...)
	ret0, _ := ret[0].(*ssm.ModifyDocumentPermissionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) ModifyDocumentPermissionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ModifyDocumentPermissionWithContext", _s...)
}

func (_m *MockSSMAPI) PutComplianceItems(_param0 *ssm.PutComplianceItemsInput) (*ssm.PutComplianceItemsOutput, error) {
	ret := _m.ctrl.Call(_m, "PutComplianceItems", _param0)
	ret0, _ := ret[0].(*ssm.PutComplianceItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) PutComplianceItems(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutComplianceItems", arg0)
}

func (_m *MockSSMAPI) PutComplianceItemsRequest(_param0 *ssm.PutComplianceItemsInput) (*request.Request, *ssm.PutComplianceItemsOutput) {
	ret := _m.ctrl.Call(_m, "PutComplianceItemsRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.PutComplianceItemsOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) PutComplianceItemsRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutComplianceItemsRequest", arg0)
}

func (_m *MockSSMAPI) PutComplianceItemsWithContext(_param0 aws.Context, _param1 *ssm.PutComplianceItemsInput, _param2 ...request.Option) (*ssm.PutComplianceItemsOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PutComplianceItemsWithContext", _s...)
	ret0, _ := ret[0].(*ssm.PutComplianceItemsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) PutComplianceItemsWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutComplianceItemsWithContext", _s...)
}

func (_m *MockSSMAPI) PutInventory(_param0 *ssm.PutInventoryInput) (*ssm.PutInventoryOutput, error) {
	ret := _m.ctrl.Call(_m, "PutInventory", _param0)
	ret0, _ := ret[0].(*ssm.PutInventoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) PutInventory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutInventory", arg0)
}

func (_m *MockSSMAPI) PutInventoryRequest(_param0 *ssm.PutInventoryInput) (*request.Request, *ssm.PutInventoryOutput) {
	ret := _m.ctrl.Call(_m, "PutInventoryRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.PutInventoryOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) PutInventoryRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutInventoryRequest", arg0)
}

func (_m *MockSSMAPI) PutInventoryWithContext(_param0 aws.Context, _param1 *ssm.PutInventoryInput, _param2 ...request.Option) (*ssm.PutInventoryOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PutInventoryWithContext", _s...)
	ret0, _ := ret[0].(*ssm.PutInventoryOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) PutInventoryWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutInventoryWithContext", _s...)
}

func (_m *MockSSMAPI) PutParameter(_param0 *ssm.PutParameterInput) (*ssm.PutParameterOutput, error) {
	ret := _m.ctrl.Call(_m, "PutParameter", _param0)
	ret0, _ := ret[0].(*ssm.PutParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) PutParameter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutParameter", arg0)
}

func (_m *MockSSMAPI) PutParameterRequest(_param0 *ssm.PutParameterInput) (*request.Request, *ssm.PutParameterOutput) {
	ret := _m.ctrl.Call(_m, "PutParameterRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.PutParameterOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) PutParameterRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutParameterRequest", arg0)
}

func (_m *MockSSMAPI) PutParameterWithContext(_param0 aws.Context, _param1 *ssm.PutParameterInput, _param2 ...request.Option) (*ssm.PutParameterOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "PutParameterWithContext", _s...)
	ret0, _ := ret[0].(*ssm.PutParameterOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) PutParameterWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutParameterWithContext", _s...)
}

func (_m *MockSSMAPI) RegisterDefaultPatchBaseline(_param0 *ssm.RegisterDefaultPatchBaselineInput) (*ssm.RegisterDefaultPatchBaselineOutput, error) {
	ret := _m.ctrl.Call(_m, "RegisterDefaultPatchBaseline", _param0)
	ret0, _ := ret[0].(*ssm.RegisterDefaultPatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterDefaultPatchBaseline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterDefaultPatchBaseline", arg0)
}

func (_m *MockSSMAPI) RegisterDefaultPatchBaselineRequest(_param0 *ssm.RegisterDefaultPatchBaselineInput) (*request.Request, *ssm.RegisterDefaultPatchBaselineOutput) {
	ret := _m.ctrl.Call(_m, "RegisterDefaultPatchBaselineRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.RegisterDefaultPatchBaselineOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterDefaultPatchBaselineRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterDefaultPatchBaselineRequest", arg0)
}

func (_m *MockSSMAPI) RegisterDefaultPatchBaselineWithContext(_param0 aws.Context, _param1 *ssm.RegisterDefaultPatchBaselineInput, _param2 ...request.Option) (*ssm.RegisterDefaultPatchBaselineOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RegisterDefaultPatchBaselineWithContext", _s...)
	ret0, _ := ret[0].(*ssm.RegisterDefaultPatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterDefaultPatchBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterDefaultPatchBaselineWithContext", _s...)
}

func (_m *MockSSMAPI) RegisterPatchBaselineForPatchGroup(_param0 *ssm.RegisterPatchBaselineForPatchGroupInput) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {
	ret := _m.ctrl.Call(_m, "RegisterPatchBaselineForPatchGroup", _param0)
	ret0, _ := ret[0].(*ssm.RegisterPatchBaselineForPatchGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterPatchBaselineForPatchGroup(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterPatchBaselineForPatchGroup", arg0)
}

func (_m *MockSSMAPI) RegisterPatchBaselineForPatchGroupRequest(_param0 *ssm.RegisterPatchBaselineForPatchGroupInput) (*request.Request, *ssm.RegisterPatchBaselineForPatchGroupOutput) {
	ret := _m.ctrl.Call(_m, "RegisterPatchBaselineForPatchGroupRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.RegisterPatchBaselineForPatchGroupOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterPatchBaselineForPatchGroupRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterPatchBaselineForPatchGroupRequest", arg0)
}

func (_m *MockSSMAPI) RegisterPatchBaselineForPatchGroupWithContext(_param0 aws.Context, _param1 *ssm.RegisterPatchBaselineForPatchGroupInput, _param2 ...request.Option) (*ssm.RegisterPatchBaselineForPatchGroupOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RegisterPatchBaselineForPatchGroupWithContext", _s...)
	ret0, _ := ret[0].(*ssm.RegisterPatchBaselineForPatchGroupOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterPatchBaselineForPatchGroupWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterPatchBaselineForPatchGroupWithContext", _s...)
}

func (_m *MockSSMAPI) RegisterTargetWithMaintenanceWindow(_param0 *ssm.RegisterTargetWithMaintenanceWindowInput) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {
	ret := _m.ctrl.Call(_m, "RegisterTargetWithMaintenanceWindow", _param0)
	ret0, _ := ret[0].(*ssm.RegisterTargetWithMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterTargetWithMaintenanceWindow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterTargetWithMaintenanceWindow", arg0)
}

func (_m *MockSSMAPI) RegisterTargetWithMaintenanceWindowRequest(_param0 *ssm.RegisterTargetWithMaintenanceWindowInput) (*request.Request, *ssm.RegisterTargetWithMaintenanceWindowOutput) {
	ret := _m.ctrl.Call(_m, "RegisterTargetWithMaintenanceWindowRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.RegisterTargetWithMaintenanceWindowOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterTargetWithMaintenanceWindowRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterTargetWithMaintenanceWindowRequest", arg0)
}

func (_m *MockSSMAPI) RegisterTargetWithMaintenanceWindowWithContext(_param0 aws.Context, _param1 *ssm.RegisterTargetWithMaintenanceWindowInput, _param2 ...request.Option) (*ssm.RegisterTargetWithMaintenanceWindowOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RegisterTargetWithMaintenanceWindowWithContext", _s...)
	ret0, _ := ret[0].(*ssm.RegisterTargetWithMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterTargetWithMaintenanceWindowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterTargetWithMaintenanceWindowWithContext", _s...)
}

func (_m *MockSSMAPI) RegisterTaskWithMaintenanceWindow(_param0 *ssm.RegisterTaskWithMaintenanceWindowInput) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {
	ret := _m.ctrl.Call(_m, "RegisterTaskWithMaintenanceWindow", _param0)
	ret0, _ := ret[0].(*ssm.RegisterTaskWithMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterTaskWithMaintenanceWindow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterTaskWithMaintenanceWindow", arg0)
}

func (_m *MockSSMAPI) RegisterTaskWithMaintenanceWindowRequest(_param0 *ssm.RegisterTaskWithMaintenanceWindowInput) (*request.Request, *ssm.RegisterTaskWithMaintenanceWindowOutput) {
	ret := _m.ctrl.Call(_m, "RegisterTaskWithMaintenanceWindowRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.RegisterTaskWithMaintenanceWindowOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterTaskWithMaintenanceWindowRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterTaskWithMaintenanceWindowRequest", arg0)
}

func (_m *MockSSMAPI) RegisterTaskWithMaintenanceWindowWithContext(_param0 aws.Context, _param1 *ssm.RegisterTaskWithMaintenanceWindowInput, _param2 ...request.Option) (*ssm.RegisterTaskWithMaintenanceWindowOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RegisterTaskWithMaintenanceWindowWithContext", _s...)
	ret0, _ := ret[0].(*ssm.RegisterTaskWithMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RegisterTaskWithMaintenanceWindowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterTaskWithMaintenanceWindowWithContext", _s...)
}

func (_m *MockSSMAPI) RemoveTagsFromResource(_param0 *ssm.RemoveTagsFromResourceInput) (*ssm.RemoveTagsFromResourceOutput, error) {
	ret := _m.ctrl.Call(_m, "RemoveTagsFromResource", _param0)
	ret0, _ := ret[0].(*ssm.RemoveTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RemoveTagsFromResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTagsFromResource", arg0)
}

func (_m *MockSSMAPI) RemoveTagsFromResourceRequest(_param0 *ssm.RemoveTagsFromResourceInput) (*request.Request, *ssm.RemoveTagsFromResourceOutput) {
	ret := _m.ctrl.Call(_m, "RemoveTagsFromResourceRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.RemoveTagsFromResourceOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RemoveTagsFromResourceRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTagsFromResourceRequest", arg0)
}

func (_m *MockSSMAPI) RemoveTagsFromResourceWithContext(_param0 aws.Context, _param1 *ssm.RemoveTagsFromResourceInput, _param2 ...request.Option) (*ssm.RemoveTagsFromResourceOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "RemoveTagsFromResourceWithContext", _s...)
	ret0, _ := ret[0].(*ssm.RemoveTagsFromResourceOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) RemoveTagsFromResourceWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTagsFromResourceWithContext", _s...)
}

func (_m *MockSSMAPI) SendAutomationSignal(_param0 *ssm.SendAutomationSignalInput) (*ssm.SendAutomationSignalOutput, error) {
	ret := _m.ctrl.Call(_m, "SendAutomationSignal", _param0)
	ret0, _ := ret[0].(*ssm.SendAutomationSignalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) SendAutomationSignal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendAutomationSignal", arg0)
}

func (_m *MockSSMAPI) SendAutomationSignalRequest(_param0 *ssm.SendAutomationSignalInput) (*request.Request, *ssm.SendAutomationSignalOutput) {
	ret := _m.ctrl.Call(_m, "SendAutomationSignalRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.SendAutomationSignalOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) SendAutomationSignalRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendAutomationSignalRequest", arg0)
}

func (_m *MockSSMAPI) SendAutomationSignalWithContext(_param0 aws.Context, _param1 *ssm.SendAutomationSignalInput, _param2 ...request.Option) (*ssm.SendAutomationSignalOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SendAutomationSignalWithContext", _s...)
	ret0, _ := ret[0].(*ssm.SendAutomationSignalOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) SendAutomationSignalWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendAutomationSignalWithContext", _s...)
}

func (_m *MockSSMAPI) SendCommand(_param0 *ssm.SendCommandInput) (*ssm.SendCommandOutput, error) {
	ret := _m.ctrl.Call(_m, "SendCommand", _param0)
	ret0, _ := ret[0].(*ssm.SendCommandOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) SendCommand(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendCommand", arg0)
}

func (_m *MockSSMAPI) SendCommandRequest(_param0 *ssm.SendCommandInput) (*request.Request, *ssm.SendCommandOutput) {
	ret := _m.ctrl.Call(_m, "SendCommandRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.SendCommandOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) SendCommandRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendCommandRequest", arg0)
}

func (_m *MockSSMAPI) SendCommandWithContext(_param0 aws.Context, _param1 *ssm.SendCommandInput, _param2 ...request.Option) (*ssm.SendCommandOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "SendCommandWithContext", _s...)
	ret0, _ := ret[0].(*ssm.SendCommandOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) SendCommandWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendCommandWithContext", _s...)
}

func (_m *MockSSMAPI) StartAutomationExecution(_param0 *ssm.StartAutomationExecutionInput) (*ssm.StartAutomationExecutionOutput, error) {
	ret := _m.ctrl.Call(_m, "StartAutomationExecution", _param0)
	ret0, _ := ret[0].(*ssm.StartAutomationExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) StartAutomationExecution(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartAutomationExecution", arg0)
}

func (_m *MockSSMAPI) StartAutomationExecutionRequest(_param0 *ssm.StartAutomationExecutionInput) (*request.Request, *ssm.StartAutomationExecutionOutput) {
	ret := _m.ctrl.Call(_m, "StartAutomationExecutionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.StartAutomationExecutionOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) StartAutomationExecutionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartAutomationExecutionRequest", arg0)
}

func (_m *MockSSMAPI) StartAutomationExecutionWithContext(_param0 aws.Context, _param1 *ssm.StartAutomationExecutionInput, _param2 ...request.Option) (*ssm.StartAutomationExecutionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "StartAutomationExecutionWithContext", _s...)
	ret0, _ := ret[0].(*ssm.StartAutomationExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) StartAutomationExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartAutomationExecutionWithContext", _s...)
}

func (_m *MockSSMAPI) StopAutomationExecution(_param0 *ssm.StopAutomationExecutionInput) (*ssm.StopAutomationExecutionOutput, error) {
	ret := _m.ctrl.Call(_m, "StopAutomationExecution", _param0)
	ret0, _ := ret[0].(*ssm.StopAutomationExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) StopAutomationExecution(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopAutomationExecution", arg0)
}

func (_m *MockSSMAPI) StopAutomationExecutionRequest(_param0 *ssm.StopAutomationExecutionInput) (*request.Request, *ssm.StopAutomationExecutionOutput) {
	ret := _m.ctrl.Call(_m, "StopAutomationExecutionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.StopAutomationExecutionOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) StopAutomationExecutionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopAutomationExecutionRequest", arg0)
}

func (_m *MockSSMAPI) StopAutomationExecutionWithContext(_param0 aws.Context, _param1 *ssm.StopAutomationExecutionInput, _param2 ...request.Option) (*ssm.StopAutomationExecutionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "StopAutomationExecutionWithContext", _s...)
	ret0, _ := ret[0].(*ssm.StopAutomationExecutionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) StopAutomationExecutionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopAutomationExecutionWithContext", _s...)
}

func (_m *MockSSMAPI) UpdateAssociation(_param0 *ssm.UpdateAssociationInput) (*ssm.UpdateAssociationOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateAssociation", _param0)
	ret0, _ := ret[0].(*ssm.UpdateAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateAssociation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAssociation", arg0)
}

func (_m *MockSSMAPI) UpdateAssociationRequest(_param0 *ssm.UpdateAssociationInput) (*request.Request, *ssm.UpdateAssociationOutput) {
	ret := _m.ctrl.Call(_m, "UpdateAssociationRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.UpdateAssociationOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateAssociationRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAssociationRequest", arg0)
}

func (_m *MockSSMAPI) UpdateAssociationStatus(_param0 *ssm.UpdateAssociationStatusInput) (*ssm.UpdateAssociationStatusOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateAssociationStatus", _param0)
	ret0, _ := ret[0].(*ssm.UpdateAssociationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateAssociationStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAssociationStatus", arg0)
}

func (_m *MockSSMAPI) UpdateAssociationStatusRequest(_param0 *ssm.UpdateAssociationStatusInput) (*request.Request, *ssm.UpdateAssociationStatusOutput) {
	ret := _m.ctrl.Call(_m, "UpdateAssociationStatusRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.UpdateAssociationStatusOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateAssociationStatusRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAssociationStatusRequest", arg0)
}

func (_m *MockSSMAPI) UpdateAssociationStatusWithContext(_param0 aws.Context, _param1 *ssm.UpdateAssociationStatusInput, _param2 ...request.Option) (*ssm.UpdateAssociationStatusOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateAssociationStatusWithContext", _s...)
	ret0, _ := ret[0].(*ssm.UpdateAssociationStatusOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateAssociationStatusWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAssociationStatusWithContext", _s...)
}

func (_m *MockSSMAPI) UpdateAssociationWithContext(_param0 aws.Context, _param1 *ssm.UpdateAssociationInput, _param2 ...request.Option) (*ssm.UpdateAssociationOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateAssociationWithContext", _s...)
	ret0, _ := ret[0].(*ssm.UpdateAssociationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateAssociationWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAssociationWithContext", _s...)
}

func (_m *MockSSMAPI) UpdateDocument(_param0 *ssm.UpdateDocumentInput) (*ssm.UpdateDocumentOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateDocument", _param0)
	ret0, _ := ret[0].(*ssm.UpdateDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateDocument(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDocument", arg0)
}

func (_m *MockSSMAPI) UpdateDocumentDefaultVersion(_param0 *ssm.UpdateDocumentDefaultVersionInput) (*ssm.UpdateDocumentDefaultVersionOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateDocumentDefaultVersion", _param0)
	ret0, _ := ret[0].(*ssm.UpdateDocumentDefaultVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateDocumentDefaultVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDocumentDefaultVersion", arg0)
}

func (_m *MockSSMAPI) UpdateDocumentDefaultVersionRequest(_param0 *ssm.UpdateDocumentDefaultVersionInput) (*request.Request, *ssm.UpdateDocumentDefaultVersionOutput) {
	ret := _m.ctrl.Call(_m, "UpdateDocumentDefaultVersionRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.UpdateDocumentDefaultVersionOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateDocumentDefaultVersionRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDocumentDefaultVersionRequest", arg0)
}

func (_m *MockSSMAPI) UpdateDocumentDefaultVersionWithContext(_param0 aws.Context, _param1 *ssm.UpdateDocumentDefaultVersionInput, _param2 ...request.Option) (*ssm.UpdateDocumentDefaultVersionOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateDocumentDefaultVersionWithContext", _s...)
	ret0, _ := ret[0].(*ssm.UpdateDocumentDefaultVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateDocumentDefaultVersionWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDocumentDefaultVersionWithContext", _s...)
}

func (_m *MockSSMAPI) UpdateDocumentRequest(_param0 *ssm.UpdateDocumentInput) (*request.Request, *ssm.UpdateDocumentOutput) {
	ret := _m.ctrl.Call(_m, "UpdateDocumentRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.UpdateDocumentOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateDocumentRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDocumentRequest", arg0)
}

func (_m *MockSSMAPI) UpdateDocumentWithContext(_param0 aws.Context, _param1 *ssm.UpdateDocumentInput, _param2 ...request.Option) (*ssm.UpdateDocumentOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateDocumentWithContext", _s...)
	ret0, _ := ret[0].(*ssm.UpdateDocumentOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateDocumentWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDocumentWithContext", _s...)
}

func (_m *MockSSMAPI) UpdateMaintenanceWindow(_param0 *ssm.UpdateMaintenanceWindowInput) (*ssm.UpdateMaintenanceWindowOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateMaintenanceWindow", _param0)
	ret0, _ := ret[0].(*ssm.UpdateMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateMaintenanceWindow(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMaintenanceWindow", arg0)
}

func (_m *MockSSMAPI) UpdateMaintenanceWindowRequest(_param0 *ssm.UpdateMaintenanceWindowInput) (*request.Request, *ssm.UpdateMaintenanceWindowOutput) {
	ret := _m.ctrl.Call(_m, "UpdateMaintenanceWindowRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.UpdateMaintenanceWindowOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateMaintenanceWindowRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMaintenanceWindowRequest", arg0)
}

func (_m *MockSSMAPI) UpdateMaintenanceWindowTarget(_param0 *ssm.UpdateMaintenanceWindowTargetInput) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateMaintenanceWindowTarget", _param0)
	ret0, _ := ret[0].(*ssm.UpdateMaintenanceWindowTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateMaintenanceWindowTarget(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMaintenanceWindowTarget", arg0)
}

func (_m *MockSSMAPI) UpdateMaintenanceWindowTargetRequest(_param0 *ssm.UpdateMaintenanceWindowTargetInput) (*request.Request, *ssm.UpdateMaintenanceWindowTargetOutput) {
	ret := _m.ctrl.Call(_m, "UpdateMaintenanceWindowTargetRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.UpdateMaintenanceWindowTargetOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateMaintenanceWindowTargetRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMaintenanceWindowTargetRequest", arg0)
}

func (_m *MockSSMAPI) UpdateMaintenanceWindowTargetWithContext(_param0 aws.Context, _param1 *ssm.UpdateMaintenanceWindowTargetInput, _param2 ...request.Option) (*ssm.UpdateMaintenanceWindowTargetOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateMaintenanceWindowTargetWithContext", _s...)
	ret0, _ := ret[0].(*ssm.UpdateMaintenanceWindowTargetOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateMaintenanceWindowTargetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMaintenanceWindowTargetWithContext", _s...)
}

func (_m *MockSSMAPI) UpdateMaintenanceWindowTask(_param0 *ssm.UpdateMaintenanceWindowTaskInput) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateMaintenanceWindowTask", _param0)
	ret0, _ := ret[0].(*ssm.UpdateMaintenanceWindowTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateMaintenanceWindowTask(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMaintenanceWindowTask", arg0)
}

func (_m *MockSSMAPI) UpdateMaintenanceWindowTaskRequest(_param0 *ssm.UpdateMaintenanceWindowTaskInput) (*request.Request, *ssm.UpdateMaintenanceWindowTaskOutput) {
	ret := _m.ctrl.Call(_m, "UpdateMaintenanceWindowTaskRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.UpdateMaintenanceWindowTaskOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateMaintenanceWindowTaskRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMaintenanceWindowTaskRequest", arg0)
}

func (_m *MockSSMAPI) UpdateMaintenanceWindowTaskWithContext(_param0 aws.Context, _param1 *ssm.UpdateMaintenanceWindowTaskInput, _param2 ...request.Option) (*ssm.UpdateMaintenanceWindowTaskOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateMaintenanceWindowTaskWithContext", _s...)
	ret0, _ := ret[0].(*ssm.UpdateMaintenanceWindowTaskOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateMaintenanceWindowTaskWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMaintenanceWindowTaskWithContext", _s...)
}

func (_m *MockSSMAPI) UpdateMaintenanceWindowWithContext(_param0 aws.Context, _param1 *ssm.UpdateMaintenanceWindowInput, _param2 ...request.Option) (*ssm.UpdateMaintenanceWindowOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateMaintenanceWindowWithContext", _s...)
	ret0, _ := ret[0].(*ssm.UpdateMaintenanceWindowOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateMaintenanceWindowWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMaintenanceWindowWithContext", _s...)
}

func (_m *MockSSMAPI) UpdateManagedInstanceRole(_param0 *ssm.UpdateManagedInstanceRoleInput) (*ssm.UpdateManagedInstanceRoleOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdateManagedInstanceRole", _param0)
	ret0, _ := ret[0].(*ssm.UpdateManagedInstanceRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateManagedInstanceRole(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateManagedInstanceRole", arg0)
}

func (_m *MockSSMAPI) UpdateManagedInstanceRoleRequest(_param0 *ssm.UpdateManagedInstanceRoleInput) (*request.Request, *ssm.UpdateManagedInstanceRoleOutput) {
	ret := _m.ctrl.Call(_m, "UpdateManagedInstanceRoleRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.UpdateManagedInstanceRoleOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateManagedInstanceRoleRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateManagedInstanceRoleRequest", arg0)
}

func (_m *MockSSMAPI) UpdateManagedInstanceRoleWithContext(_param0 aws.Context, _param1 *ssm.UpdateManagedInstanceRoleInput, _param2 ...request.Option) (*ssm.UpdateManagedInstanceRoleOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdateManagedInstanceRoleWithContext", _s...)
	ret0, _ := ret[0].(*ssm.UpdateManagedInstanceRoleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdateManagedInstanceRoleWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateManagedInstanceRoleWithContext", _s...)
}

func (_m *MockSSMAPI) UpdatePatchBaseline(_param0 *ssm.UpdatePatchBaselineInput) (*ssm.UpdatePatchBaselineOutput, error) {
	ret := _m.ctrl.Call(_m, "UpdatePatchBaseline", _param0)
	ret0, _ := ret[0].(*ssm.UpdatePatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdatePatchBaseline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdatePatchBaseline", arg0)
}

func (_m *MockSSMAPI) UpdatePatchBaselineRequest(_param0 *ssm.UpdatePatchBaselineInput) (*request.Request, *ssm.UpdatePatchBaselineOutput) {
	ret := _m.ctrl.Call(_m, "UpdatePatchBaselineRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*ssm.UpdatePatchBaselineOutput)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdatePatchBaselineRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdatePatchBaselineRequest", arg0)
}

func (_m *MockSSMAPI) UpdatePatchBaselineWithContext(_param0 aws.Context, _param1 *ssm.UpdatePatchBaselineInput, _param2 ...request.Option) (*ssm.UpdatePatchBaselineOutput, error) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "UpdatePatchBaselineWithContext", _s...)
	ret0, _ := ret[0].(*ssm.UpdatePatchBaselineOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSSMAPIRecorder) UpdatePatchBaselineWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdatePatchBaselineWithContext", _s...)
}
